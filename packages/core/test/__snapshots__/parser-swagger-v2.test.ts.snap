// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`swagger-parser v2 cookie-param.json: cookie-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "buid",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "token",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": false,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Cookies",
          "method": "get",
          "path": "/cookies",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": null,
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "Cookies",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 enum-param.json: enum-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "请求参数 enum",
          "method": "post",
          "path": "/enum",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status1",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status2",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [
                      "available",
                      "pending",
                      "sold",
                    ],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": true,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 enum",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 form-data-param.json: form-data-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [
            "file",
          ],
          "headers": null,
          "id": "",
          "label": "请求参数 form-data",
          "method": "post",
          "path": "/form-data",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "multipart/form-data",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              FileSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "binary",
                "id": "",
                "keyName": "file",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "File",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 form-data",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 header-param.json: header-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "token",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "header2",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": false,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "id": "",
          "label": "Headers",
          "method": "get",
          "path": "/headers",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": null,
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "Headers",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 json-param.json: json-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "请求参数 json",
          "method": "post",
          "path": "/json",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 json",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 octet-stream-param.json: octet-stream-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "请求参数 application/octet-stream",
          "method": "post",
          "path": "/application/octet-stream",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/octet-stream",
          ],
          "requestDataSchema": FileSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "binary",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "string",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
              "required": false,
            },
            "title": "",
            "type": "File",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 application/octet-stream",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 path-param.json: path-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "请求参数 路径参数",
          "method": "get",
          "path": "/path/{param}",
          "pathParamKeyNameList": [
            "param",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "param",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 路径参数",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 petstore.json: petstore.json 1`] = `
{
  "basePath": "/v2",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [
            "additionalMetadata",
            "file",
          ],
          "headers": null,
          "id": "",
          "label": "uploads an image",
          "method": "post",
          "path": "/v2/pet/{petId}/uploadImage",
          "pathParamKeyNameList": [
            "petId",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "multipart/form-data",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "ID of pet to update",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "petId",
                "label": "ID of pet to update",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "Additional data to pass to server",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "additionalMetadata",
                "label": "Additional data to pass to server",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              FileSchema {
                "description": "file to upload",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "file",
                "label": "file to upload",
                "params": [],
                "rawType": "file",
                "rules": {
                  "required": false,
                },
                "title": "",
                "type": "File",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              NumberSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int32",
                "id": "",
                "keyName": "code",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "exclusiveMaximum": undefined,
                  "exclusiveMinimum": undefined,
                  "maximum": undefined,
                  "minimum": undefined,
                  "multipleOf": undefined,
                  "required": true,
                },
                "title": "",
                "type": "number",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "type",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "message",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "uploads an image",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Add a new pet to the store",
          "method": "post",
          "path": "/v2/pet",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
            "application/xml",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "category",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int64",
                    "id": "",
                    "keyName": "id",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "name",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": false,
                },
                "title": "",
                "type": "object",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "name",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "photoUrls",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": true,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "tags",
                "label": "",
                "params": [
                  ObjectSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "int64",
                        "id": "",
                        "keyName": "id",
                        "label": "",
                        "params": [],
                        "rawType": "integer",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": false,
                        },
                        "title": "",
                        "type": "string",
                      },
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "name",
                        "label": "",
                        "params": [],
                        "rawType": "string",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": false,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "object",
                    "rules": {
                      "required": false,
                    },
                    "title": "",
                    "type": "object",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": false,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              StringSchema {
                "description": "pet status in the store",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "pet status in the store",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Add a new pet to the store",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Update an existing pet",
          "method": "put",
          "path": "/v2/pet",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
            "application/xml",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "category",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int64",
                    "id": "",
                    "keyName": "id",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "name",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": false,
                },
                "title": "",
                "type": "object",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "name",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "photoUrls",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": true,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "tags",
                "label": "",
                "params": [
                  ObjectSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "int64",
                        "id": "",
                        "keyName": "id",
                        "label": "",
                        "params": [],
                        "rawType": "integer",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": false,
                        },
                        "title": "",
                        "type": "string",
                      },
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "name",
                        "label": "",
                        "params": [],
                        "rawType": "string",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": false,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "object",
                    "rules": {
                      "required": false,
                    },
                    "title": "",
                    "type": "object",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": false,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              StringSchema {
                "description": "pet status in the store",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "pet status in the store",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Update an existing pet",
        },
        {
          "cookies": null,
          "description": "Multiple status values can be provided with comma separated strings",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Finds Pets by status",
          "method": "get",
          "path": "/v2/pet/findByStatus",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [
            "status",
          ],
          "requestContentType": [
            "application/x-www-form-urlencoded",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ArraySchema {
                "description": "Status values that need to be considered for filter",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "Status values that need to be considered for filter",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [
                      "available",
                      "pending",
                      "sold",
                    ],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": true,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": ArraySchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int64",
                    "id": "",
                    "keyName": "id",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                  ObjectSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "category",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "int64",
                        "id": "",
                        "keyName": "id",
                        "label": "",
                        "params": [],
                        "rawType": "integer",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "name",
                        "label": "",
                        "params": [],
                        "rawType": "string",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "object",
                    "rules": {
                      "required": true,
                    },
                    "title": "",
                    "type": "object",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "name",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                  ArraySchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "photoUrls",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "",
                        "label": "",
                        "params": [],
                        "rawType": "string",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "array",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "required": true,
                      "uniqueItems": undefined,
                    },
                    "title": "",
                    "type": "array",
                  },
                  ArraySchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "tags",
                    "label": "",
                    "params": [
                      ObjectSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "",
                        "label": "",
                        "params": [
                          StringSchema {
                            "description": "",
                            "enum": [],
                            "examples": [],
                            "format": "int64",
                            "id": "",
                            "keyName": "id",
                            "label": "",
                            "params": [],
                            "rawType": "integer",
                            "rules": {
                              "maxLength": undefined,
                              "minLength": undefined,
                              "pattern": undefined,
                              "required": true,
                            },
                            "title": "",
                            "type": "string",
                          },
                          StringSchema {
                            "description": "",
                            "enum": [],
                            "examples": [],
                            "format": "",
                            "id": "",
                            "keyName": "name",
                            "label": "",
                            "params": [],
                            "rawType": "string",
                            "rules": {
                              "maxLength": undefined,
                              "minLength": undefined,
                              "pattern": undefined,
                              "required": true,
                            },
                            "title": "",
                            "type": "string",
                          },
                        ],
                        "rawType": "object",
                        "rules": {
                          "required": true,
                        },
                        "title": "",
                        "type": "object",
                      },
                    ],
                    "rawType": "array",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "required": true,
                      "uniqueItems": undefined,
                    },
                    "title": "",
                    "type": "array",
                  },
                  StringSchema {
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold",
                    ],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "status",
                    "label": "pet status in the store",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "object",
              },
            ],
            "rawType": "array",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "required": true,
              "uniqueItems": undefined,
            },
            "title": "",
            "type": "array",
          },
          "title": "Finds Pets by status",
        },
        {
          "cookies": null,
          "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Finds Pets by tags",
          "method": "get",
          "path": "/v2/pet/findByTags",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [
            "tags",
          ],
          "requestContentType": [
            "application/x-www-form-urlencoded",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ArraySchema {
                "description": "Tags to filter by",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "tags",
                "label": "Tags to filter by",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": true,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": ArraySchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int64",
                    "id": "",
                    "keyName": "id",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                  ObjectSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "category",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "int64",
                        "id": "",
                        "keyName": "id",
                        "label": "",
                        "params": [],
                        "rawType": "integer",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "name",
                        "label": "",
                        "params": [],
                        "rawType": "string",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "object",
                    "rules": {
                      "required": true,
                    },
                    "title": "",
                    "type": "object",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "name",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                  ArraySchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "photoUrls",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "",
                        "label": "",
                        "params": [],
                        "rawType": "string",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "array",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "required": true,
                      "uniqueItems": undefined,
                    },
                    "title": "",
                    "type": "array",
                  },
                  ArraySchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "tags",
                    "label": "",
                    "params": [
                      ObjectSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "",
                        "label": "",
                        "params": [
                          StringSchema {
                            "description": "",
                            "enum": [],
                            "examples": [],
                            "format": "int64",
                            "id": "",
                            "keyName": "id",
                            "label": "",
                            "params": [],
                            "rawType": "integer",
                            "rules": {
                              "maxLength": undefined,
                              "minLength": undefined,
                              "pattern": undefined,
                              "required": true,
                            },
                            "title": "",
                            "type": "string",
                          },
                          StringSchema {
                            "description": "",
                            "enum": [],
                            "examples": [],
                            "format": "",
                            "id": "",
                            "keyName": "name",
                            "label": "",
                            "params": [],
                            "rawType": "string",
                            "rules": {
                              "maxLength": undefined,
                              "minLength": undefined,
                              "pattern": undefined,
                              "required": true,
                            },
                            "title": "",
                            "type": "string",
                          },
                        ],
                        "rawType": "object",
                        "rules": {
                          "required": true,
                        },
                        "title": "",
                        "type": "object",
                      },
                    ],
                    "rawType": "array",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "required": true,
                      "uniqueItems": undefined,
                    },
                    "title": "",
                    "type": "array",
                  },
                  StringSchema {
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold",
                    ],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "status",
                    "label": "pet status in the store",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "object",
              },
            ],
            "rawType": "array",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "required": true,
              "uniqueItems": undefined,
            },
            "title": "",
            "type": "array",
          },
          "title": "Finds Pets by tags",
        },
        {
          "cookies": null,
          "description": "Returns a single pet",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Find pet by ID",
          "method": "get",
          "path": "/v2/pet/{petId}",
          "pathParamKeyNameList": [
            "petId",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "ID of pet to return",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "petId",
                "label": "ID of pet to return",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "category",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int64",
                    "id": "",
                    "keyName": "id",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "name",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "object",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "name",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "photoUrls",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": true,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "tags",
                "label": "",
                "params": [
                  ObjectSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "int64",
                        "id": "",
                        "keyName": "id",
                        "label": "",
                        "params": [],
                        "rawType": "integer",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                      StringSchema {
                        "description": "",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "name",
                        "label": "",
                        "params": [],
                        "rawType": "string",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": true,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "object",
                    "rules": {
                      "required": true,
                    },
                    "title": "",
                    "type": "object",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": true,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              StringSchema {
                "description": "pet status in the store",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "pet status in the store",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "Find pet by ID",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Updates a pet in the store with form data",
          "method": "post",
          "path": "/v2/pet/{petId}",
          "pathParamKeyNameList": [
            "petId",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/x-www-form-urlencoded",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "ID of pet that needs to be updated",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "petId",
                "label": "ID of pet that needs to be updated",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "Updated name of the pet",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "name",
                "label": "Updated name of the pet",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "Updated status of the pet",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "Updated status of the pet",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Updates a pet in the store with form data",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "api_key",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "id": "",
          "label": "Deletes a pet",
          "method": "delete",
          "path": "/v2/pet/{petId}",
          "pathParamKeyNameList": [
            "petId",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "Pet id to delete",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "petId",
                "label": "Pet id to delete",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Deletes a pet",
        },
      ],
      "description": "Everything about your Pets",
      "id": "",
      "name": "pet",
    },
    {
      "apiList": [
        {
          "cookies": null,
          "description": "Returns a map of status codes to quantities",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Returns pet inventories by status",
          "method": "get",
          "path": "/v2/store/inventory",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": null,
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "Returns pet inventories by status",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Place an order for a pet",
          "method": "post",
          "path": "/v2/store/order",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "petId",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              NumberSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int32",
                "id": "",
                "keyName": "quantity",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "exclusiveMaximum": undefined,
                  "exclusiveMinimum": undefined,
                  "maximum": undefined,
                  "minimum": undefined,
                  "multipleOf": undefined,
                  "required": false,
                },
                "title": "",
                "type": "number",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "date-time",
                "id": "",
                "keyName": "shipDate",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "Order Status",
                "enum": [
                  "placed",
                  "approved",
                  "delivered",
                ],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "Order Status",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              BooleanSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "complete",
                "label": "",
                "params": [],
                "rawType": "boolean",
                "rules": {
                  "required": false,
                },
                "title": "",
                "type": "boolean",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "petId",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              NumberSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int32",
                "id": "",
                "keyName": "quantity",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "exclusiveMaximum": undefined,
                  "exclusiveMinimum": undefined,
                  "maximum": undefined,
                  "minimum": undefined,
                  "multipleOf": undefined,
                  "required": true,
                },
                "title": "",
                "type": "number",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "date-time",
                "id": "",
                "keyName": "shipDate",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "Order Status",
                "enum": [
                  "placed",
                  "approved",
                  "delivered",
                ],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "Order Status",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              BooleanSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "complete",
                "label": "",
                "params": [],
                "rawType": "boolean",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "boolean",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "Place an order for a pet",
        },
        {
          "cookies": null,
          "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Find purchase order by ID",
          "method": "get",
          "path": "/v2/store/order/{orderId}",
          "pathParamKeyNameList": [
            "orderId",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "ID of pet that needs to be fetched",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "orderId",
                "label": "ID of pet that needs to be fetched",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "petId",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              NumberSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int32",
                "id": "",
                "keyName": "quantity",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "exclusiveMaximum": undefined,
                  "exclusiveMinimum": undefined,
                  "maximum": undefined,
                  "minimum": undefined,
                  "multipleOf": undefined,
                  "required": true,
                },
                "title": "",
                "type": "number",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "date-time",
                "id": "",
                "keyName": "shipDate",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "Order Status",
                "enum": [
                  "placed",
                  "approved",
                  "delivered",
                ],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "status",
                "label": "Order Status",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              BooleanSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "complete",
                "label": "",
                "params": [],
                "rawType": "boolean",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "boolean",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "Find purchase order by ID",
        },
        {
          "cookies": null,
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Delete purchase order by ID",
          "method": "delete",
          "path": "/v2/store/order/{orderId}",
          "pathParamKeyNameList": [
            "orderId",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "ID of the order that needs to be deleted",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "orderId",
                "label": "ID of the order that needs to be deleted",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Delete purchase order by ID",
        },
      ],
      "description": "Access to Petstore orders",
      "id": "",
      "name": "store",
    },
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Creates list of users with given input array",
          "method": "post",
          "path": "/v2/user/createWithList",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
          ],
          "requestDataSchema": ArraySchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int64",
                    "id": "",
                    "keyName": "id",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "username",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "firstName",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "lastName",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "email",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "password",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "phone",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  NumberSchema {
                    "description": "User Status",
                    "enum": [],
                    "examples": [],
                    "format": "int32",
                    "id": "",
                    "keyName": "userStatus",
                    "label": "User Status",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "exclusiveMaximum": undefined,
                      "exclusiveMinimum": undefined,
                      "maximum": undefined,
                      "minimum": undefined,
                      "multipleOf": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "number",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": false,
                },
                "title": "",
                "type": "object",
              },
            ],
            "rawType": "array",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "required": false,
              "uniqueItems": undefined,
            },
            "title": "",
            "type": "array",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Creates list of users with given input array",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Get user by user name",
          "method": "get",
          "path": "/v2/user/{username}",
          "pathParamKeyNameList": [
            "username",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "The name that needs to be fetched. Use user1 for testing. ",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "The name that needs to be fetched. Use user1 for testing. ",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "firstName",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "lastName",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "email",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "password",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "phone",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              NumberSchema {
                "description": "User Status",
                "enum": [],
                "examples": [],
                "format": "int32",
                "id": "",
                "keyName": "userStatus",
                "label": "User Status",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "exclusiveMaximum": undefined,
                  "exclusiveMinimum": undefined,
                  "maximum": undefined,
                  "minimum": undefined,
                  "multipleOf": undefined,
                  "required": true,
                },
                "title": "",
                "type": "number",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "Get user by user name",
        },
        {
          "cookies": null,
          "description": "This can only be done by the logged in user.",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Updated user",
          "method": "put",
          "path": "/v2/user/{username}",
          "pathParamKeyNameList": [
            "username",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "name that need to be updated",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "name that need to be updated",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "firstName",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "lastName",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "email",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "password",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "phone",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              NumberSchema {
                "description": "User Status",
                "enum": [],
                "examples": [],
                "format": "int32",
                "id": "",
                "keyName": "userStatus",
                "label": "User Status",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "exclusiveMaximum": undefined,
                  "exclusiveMinimum": undefined,
                  "maximum": undefined,
                  "minimum": undefined,
                  "multipleOf": undefined,
                  "required": false,
                },
                "title": "",
                "type": "number",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Updated user",
        },
        {
          "cookies": null,
          "description": "This can only be done by the logged in user.",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Delete user",
          "method": "delete",
          "path": "/v2/user/{username}",
          "pathParamKeyNameList": [
            "username",
          ],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "The name that needs to be deleted",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "The name that needs to be deleted",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Delete user",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Logs user into the system",
          "method": "get",
          "path": "/v2/user/login",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [
            "username",
            "password",
          ],
          "requestContentType": [
            "application/x-www-form-urlencoded",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "The user name for login",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "The user name for login",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "The password for login in clear text",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "password",
                "label": "The password for login in clear text",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": StringSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "string",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
              "required": true,
            },
            "title": "",
            "type": "string",
          },
          "title": "Logs user into the system",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Logs out current logged in user session",
          "method": "get",
          "path": "/v2/user/logout",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": null,
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Logs out current logged in user session",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Creates list of users with given input array",
          "method": "post",
          "path": "/v2/user/createWithArray",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
          ],
          "requestDataSchema": ArraySchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int64",
                    "id": "",
                    "keyName": "id",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "username",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "firstName",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "lastName",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "email",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "password",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "phone",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  NumberSchema {
                    "description": "User Status",
                    "enum": [],
                    "examples": [],
                    "format": "int32",
                    "id": "",
                    "keyName": "userStatus",
                    "label": "User Status",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "exclusiveMaximum": undefined,
                      "exclusiveMinimum": undefined,
                      "maximum": undefined,
                      "minimum": undefined,
                      "multipleOf": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "number",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": false,
                },
                "title": "",
                "type": "object",
              },
            ],
            "rawType": "array",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "required": false,
              "uniqueItems": undefined,
            },
            "title": "",
            "type": "array",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Creates list of users with given input array",
        },
        {
          "cookies": null,
          "description": "This can only be done by the logged in user.",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "Create user",
          "method": "post",
          "path": "/v2/user",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/json",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "int64",
                "id": "",
                "keyName": "id",
                "label": "",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "firstName",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "lastName",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "email",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "password",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "phone",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              NumberSchema {
                "description": "User Status",
                "enum": [],
                "examples": [],
                "format": "int32",
                "id": "",
                "keyName": "userStatus",
                "label": "User Status",
                "params": [],
                "rawType": "integer",
                "rules": {
                  "exclusiveMaximum": undefined,
                  "exclusiveMinimum": undefined,
                  "maximum": undefined,
                  "minimum": undefined,
                  "multipleOf": undefined,
                  "required": false,
                },
                "title": "",
                "type": "number",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
            "application/xml",
          ],
          "responseDataSchema": null,
          "title": "Create user",
        },
      ],
      "description": "Operations about user",
      "id": "",
      "name": "user",
    },
    {
      "apiList": [],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "Swagger Petstore",
  "version": "1.0.7",
}
`;

exports[`swagger-parser v2 query-param.json: query-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "请求参数 查询字符串",
          "method": "get",
          "path": "/query-params",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [
            "username",
            "phone",
          ],
          "requestContentType": [
            "application/x-www-form-urlencoded",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "用户名",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "用户名",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
              StringSchema {
                "description": "联系电话",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "phone",
                "label": "联系电话",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 查询字符串",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 resp-array.json: resp-array.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "响应数据 array",
          "method": "post",
          "path": "/resp-array",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": null,
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ArraySchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "username",
                    "label": "用户名",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": true,
                    },
                    "title": "用户名",
                    "type": "string",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "object",
              },
            ],
            "rawType": "array",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "required": true,
              "uniqueItems": undefined,
            },
            "title": "",
            "type": "array",
          },
          "title": "响应数据 array",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 text-plain-param.json: text-plain-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "请求参数 text/plain",
          "method": "post",
          "path": "/api/text/plain",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "text/plain",
          ],
          "requestDataSchema": StringSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "string",
            "rules": {
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
              "required": false,
            },
            "title": "",
            "type": "string",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 text/plain",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 unofficial-specification-dot-query-param.json: unofficial-specification-dot-query-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "兼容非标准的请求json参数，例子1",
          "method": "get",
          "path": "/compatible-error-specification-dot-query-param",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [
            "ids",
            "dept",
            "roles",
            "有分页参数的话就加,根据你的实际查询参数编写",
          ],
          "requestContentType": [
            "application/x-www-form-urlencoded",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ArraySchema {
                "description": "ID集合",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "ids",
                "label": "ID集合",
                "params": [
                  NumberSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "",
                    "rules": {
                      "exclusiveMaximum": undefined,
                      "exclusiveMinimum": undefined,
                      "maximum": undefined,
                      "minimum": undefined,
                      "multipleOf": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "number",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": false,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              ObjectSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "dept",
                "label": "",
                "params": [
                  StringSchema {
                    "description": "创建者1号",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "deptCreateBy1",
                    "label": "创建者1号",
                    "params": [],
                    "rawType": "",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                  NumberSchema {
                    "description": "创建者2号",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "deptCreateBy2",
                    "label": "创建者2号",
                    "params": [],
                    "rawType": "",
                    "rules": {
                      "exclusiveMaximum": undefined,
                      "exclusiveMinimum": undefined,
                      "maximum": undefined,
                      "minimum": undefined,
                      "multipleOf": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "number",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": false,
                },
                "title": "",
                "type": "object",
              },
              ArraySchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "roles",
                "label": "",
                "params": [
                  ObjectSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [
                      StringSchema {
                        "description": "角色创建者1号",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "roleCreateBy1",
                        "label": "角色创建者1号",
                        "params": [],
                        "rawType": "",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": false,
                        },
                        "title": "",
                        "type": "string",
                      },
                      StringSchema {
                        "description": "角色创建时间",
                        "enum": [],
                        "examples": [],
                        "format": "",
                        "id": "",
                        "keyName": "roleCreateTime",
                        "label": "角色创建时间",
                        "params": [],
                        "rawType": "",
                        "rules": {
                          "maxLength": undefined,
                          "minLength": undefined,
                          "pattern": undefined,
                          "required": false,
                        },
                        "title": "",
                        "type": "string",
                      },
                    ],
                    "rawType": "object",
                    "rules": {
                      "required": false,
                    },
                    "title": "",
                    "type": "object",
                  },
                ],
                "rawType": "array",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "required": false,
                  "uniqueItems": undefined,
                },
                "title": "",
                "type": "array",
              },
              StringSchema {
                "description": "有分页参数的话就加,根据你的实际查询参数编写",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "有分页参数的话就加,根据你的实际查询参数编写",
                "label": "有分页参数的话就加,根据你的实际查询参数编写",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "兼容非标准的请求json参数，例子1",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 unofficial-specification-json-param.json: unofficial-specification-json-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "兼容非标准的请求json参数，例子1",
          "method": "get",
          "path": "/compatible-error-specification-json-param1",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ObjectSchema {
                "description": "任务id",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "id",
                "label": "任务id",
                "params": [
                  NumberSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int32",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "exclusiveMaximum": undefined,
                      "exclusiveMinimum": undefined,
                      "maximum": undefined,
                      "minimum": undefined,
                      "multipleOf": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "number",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "number",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "兼容非标准的请求json参数，例子1",
        },
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "兼容非标准的请求json参数，例子2",
          "method": "get",
          "path": "/compatible-error-specification-json-param2",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              ObjectSchema {
                "description": "册、分册主键id",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "id",
                "label": "册、分册主键id",
                "params": [
                  StringSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "string",
                    "rules": {
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "string",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "string",
              },
              ObjectSchema {
                "description": "册、分册level",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "level",
                "label": "册、分册level",
                "params": [
                  NumberSchema {
                    "description": "",
                    "enum": [],
                    "examples": [],
                    "format": "int32",
                    "id": "",
                    "keyName": "",
                    "label": "",
                    "params": [],
                    "rawType": "integer",
                    "rules": {
                      "exclusiveMaximum": undefined,
                      "exclusiveMinimum": undefined,
                      "maximum": undefined,
                      "minimum": undefined,
                      "multipleOf": undefined,
                      "required": false,
                    },
                    "title": "",
                    "type": "number",
                  },
                ],
                "rawType": "object",
                "rules": {
                  "required": true,
                },
                "title": "",
                "type": "number",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "兼容非标准的请求json参数，例子2",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;

exports[`swagger-parser v2 x-www-form-urlencoded-param.json: x-www-form-urlencoded-param.json 1`] = `
{
  "basePath": "",
  "categoryList": [
    {
      "apiList": [
        {
          "cookies": null,
          "description": "",
          "docURL": "",
          "formDataKeyNameList": [],
          "headers": null,
          "id": "",
          "label": "请求参数 x-www-form-urlencoded",
          "method": "post",
          "path": "/x-www-form-urlencoded",
          "pathParamKeyNameList": [],
          "queryStringKeyNameList": [],
          "requestContentType": [
            "application/x-www-form-urlencoded",
          ],
          "requestDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [
              StringSchema {
                "description": "",
                "enum": [],
                "examples": [],
                "format": "",
                "id": "",
                "keyName": "username",
                "label": "",
                "params": [],
                "rawType": "string",
                "rules": {
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                  "required": false,
                },
                "title": "",
                "type": "string",
              },
            ],
            "rawType": "object",
            "rules": {
              "required": false,
            },
            "title": "",
            "type": "object",
          },
          "requestExtraDataSchema": null,
          "responseContentType": [
            "application/json",
          ],
          "responseDataSchema": ObjectSchema {
            "description": "",
            "enum": [],
            "examples": [],
            "format": "",
            "id": "",
            "keyName": "",
            "label": "",
            "params": [],
            "rawType": "object",
            "rules": {
              "required": true,
            },
            "title": "",
            "type": "object",
          },
          "title": "请求参数 x-www-form-urlencoded",
        },
      ],
      "description": "未设置分组的接口集合",
      "id": "",
      "name": "未知分组",
    },
  ],
  "description": "",
  "documentServerUrl": "",
  "documentVersion": "2.0",
  "id": "",
  "title": "API HELPER 示例项目",
  "version": "1.0.0",
}
`;
