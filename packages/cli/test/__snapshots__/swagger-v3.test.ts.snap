// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`swagger v3 dot参数: dot参数 1`] = `
"/* tslint:disable */
/* eslint-disable */
/* prettier-ignore-start */

/* 代码生成时间： */
/* 提示：该文件由 API Helper CLI 自动生成，请勿直接修改。 */
/* 文档参考：https://github.com/ztz2/api-helper */

// @ts-ignore
// prettier-ignore
import {
  RequestFunctionRestArgsType,
  processRequestFunctionConfig,
} from '@api-helper/cli/lib/helpers';
// @ts-ignore
// prettier-ignore
import request from './request';
// @ts-ignore
// prettier-ignore
type CurrentRequestFunctionRestArgsType = RequestFunctionRestArgsType<typeof request>;

/**
 * @description 兼容非标准的dot参数形式
 * @summary Request data types
 * @url [ GET ] /compatible-error-specification-dot-query-param
 */
export interface CompatibleErrorSpecificationDotQueryParamRequestByGet {
  // ID集合
  ids?: Array<string>;
  dept?: {
    // 创建者1号
    deptCreateBy1?: string;
    // 创建者2号
    deptCreateBy2?: string;
  };
  roles?: Array<{
    // 角色创建者1号
    roleCreateBy1?: string;
    // 角色创建时间
    roleCreateTime?: string;
  }>;
  // 有分页参数的话就加,根据你的实际查询参数编写
  '有分页参数的话就加,根据你的实际查询参数编写'?: string;
}
/**
 * @description 兼容非标准的dot参数形式
 * @summary Response data types
 * @url [ GET ] /compatible-error-specification-dot-query-param
 */
export type CompatibleErrorSpecificationDotQueryParamResponseByGet = any;
/**
 * @description 兼容非标准的dot参数形式
 * @url [ GET ] /compatible-error-specification-dot-query-param
 */
export function compatibleErrorSpecificationDotQueryParamByGet(
  data: CompatibleErrorSpecificationDotQueryParamRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<CompatibleErrorSpecificationDotQueryParamResponseByGet>(
    processRequestFunctionConfig(data, extraData, compatibleErrorSpecificationDotQueryParamByGet.requestConfig),
    ...args
  );
}
compatibleErrorSpecificationDotQueryParamByGet.requestConfig = {
  path: '/compatible-error-specification-dot-query-param',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['ids', 'dept', 'roles', '有分页参数的话就加,根据你的实际查询参数编写'],
};
"
`;

exports[`swagger v3 本地文件代码: 本地文件代码 1`] = `
"/* tslint:disable */
/* eslint-disable */
/* prettier-ignore-start */

/* 代码生成时间： */
/* 提示：该文件由 API Helper CLI 自动生成，请勿直接修改。 */
/* 文档参考：https://github.com/ztz2/api-helper */

// @ts-ignore
// prettier-ignore
import {
  RequestFunctionRestArgsType,
  processRequestFunctionConfig,
} from '@api-helper/cli/lib/helpers';
// @ts-ignore
// prettier-ignore
import request from './request';
// @ts-ignore
// prettier-ignore
type CurrentRequestFunctionRestArgsType = RequestFunctionRestArgsType<typeof request>;

/**
 * @description Update an existing pet、Update an existing pet by Id
 * @summary Request data types
 * @url [ PUT ] /api/v3/pet
 */
export interface ApiV3PetRequestByPut {
  id: string;
  name: string;
  category: {
    id: string;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet、Update an existing pet by Id
 * @summary Response data types
 * @url [ PUT ] /api/v3/pet
 */
export interface ApiV3PetResponseByPut {
  id?: string;
  name: string;
  category?: {
    id?: string;
    name?: string;
  };
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet、Update an existing pet by Id
 * @url [ PUT ] /api/v3/pet
 */
export function apiV3PetByPut(data: ApiV3PetRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetResponseByPut>(processRequestFunctionConfig(data, extraData, apiV3PetByPut.requestConfig), ...args);
}
apiV3PetByPut.requestConfig = {
  path: '/api/v3/pet',
  method: 'PUT',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [],
};
/**
 * @description Add a new pet to the store、Add a new pet to the store
 * @summary Request data types
 * @url [ POST ] /api/v3/pet
 */
export interface ApiV3PetRequestByPost {
  id: string;
  name: string;
  category: {
    id: string;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store、Add a new pet to the store
 * @summary Response data types
 * @url [ POST ] /api/v3/pet
 */
export interface ApiV3PetResponseByPost {
  id?: string;
  name: string;
  category?: {
    id?: string;
    name?: string;
  };
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store、Add a new pet to the store
 * @url [ POST ] /api/v3/pet
 */
export function apiV3PetByPost(data: ApiV3PetRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetResponseByPost>(processRequestFunctionConfig(data, extraData, apiV3PetByPost.requestConfig), ...args);
}
apiV3PetByPost.requestConfig = {
  path: '/api/v3/pet',
  method: 'POST',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [],
};
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
 * @summary Request data types
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export interface ApiV3PetFindByStatusRequestByGet {
  // Status values that need to be considered for filter
  status: 'available' | 'pending' | 'sold';
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
 * @summary Response data types
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export type ApiV3PetFindByStatusResponseByGet = Array<{
  id?: string;
  name: string;
  category?: {
    id?: string;
    name?: string;
  };
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}>;
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export function apiV3PetFindByStatusByGet(
  data: ApiV3PetFindByStatusRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetFindByStatusResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3PetFindByStatusByGet.requestConfig),
    ...args
  );
}
apiV3PetFindByStatusByGet.requestConfig = {
  path: '/api/v3/pet/findByStatus',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['status'],
};
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Request data types
 * @url [ GET ] /api/v3/pet/findByTags
 */
export interface ApiV3PetFindByTagsRequestByGet {
  // Tags to filter by
  tags: Array<string>;
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Response data types
 * @url [ GET ] /api/v3/pet/findByTags
 */
export type ApiV3PetFindByTagsResponseByGet = Array<{
  id?: string;
  name: string;
  category?: {
    id?: string;
    name?: string;
  };
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}>;
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @url [ GET ] /api/v3/pet/findByTags
 */
export function apiV3PetFindByTagsByGet(
  data: ApiV3PetFindByTagsRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetFindByTagsResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3PetFindByTagsByGet.requestConfig),
    ...args
  );
}
apiV3PetFindByTagsByGet.requestConfig = {
  path: '/api/v3/pet/findByTags',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['tags'],
};
/**
 * @description Find pet by ID、Returns a single pet
 * @summary Request data types
 * @url [ GET ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdRequestByGet {
  // ID of pet to return
  petId: string;
}
/**
 * @description Find pet by ID、Returns a single pet
 * @summary Response data types
 * @url [ GET ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdResponseByGet {
  id?: string;
  name: string;
  category?: {
    id?: string;
    name?: string;
  };
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Find pet by ID、Returns a single pet
 * @url [ GET ] /api/v3/pet/{petId}
 */
export function apiV3PetPetIdByGet(data: ApiV3PetPetIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetPetIdResponseByGet>(processRequestFunctionConfig(data, extraData, apiV3PetPetIdByGet.requestConfig), ...args);
}
apiV3PetPetIdByGet.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: [],
};
/**
 * @description Updates a pet in the store with form data
 * @summary Request data types
 * @url [ POST ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdRequestByPost {
  // ID of pet that needs to be updated
  petId: string;
  // Name of pet that needs to be updated
  name: string;
  // Status of pet that needs to be updated
  status: string;
}
/**
 * @description Updates a pet in the store with form data
 * @summary Response data types
 * @url [ POST ] /api/v3/pet/{petId}
 */
export type ApiV3PetPetIdResponseByPost = any;
/**
 * @description Updates a pet in the store with form data
 * @url [ POST ] /api/v3/pet/{petId}
 */
export function apiV3PetPetIdByPost(data: ApiV3PetPetIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetPetIdResponseByPost>(processRequestFunctionConfig(data, extraData, apiV3PetPetIdByPost.requestConfig), ...args);
}
apiV3PetPetIdByPost.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'POST',
  requestContentType: [],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: ['name', 'status'],
};
/**
 * @description Deletes a pet
 * @summary Request data types
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdRequestByDelete {
  // Pet id to delete
  petId: string;
}
/**
 * @description Deletes a pet
 * @summary Response data types
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export type ApiV3PetPetIdResponseByDelete = any;
/**
 * @description Deletes a pet
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export function apiV3PetPetIdByDelete(
  data: ApiV3PetPetIdRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetPetIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, apiV3PetPetIdByDelete.requestConfig),
    ...args
  );
}
apiV3PetPetIdByDelete.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'DELETE',
  requestContentType: [],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: [],
};
/**
 * @description uploads an image
 * @summary Request data types
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export interface ApiV3PetPetIdUploadImageRequestByPost {
  // ID of pet to update
  petId: string;
  // Additional Metadata
  additionalMetadata: string;
}
/**
 * @description uploads an image
 * @summary Response data types
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export interface ApiV3PetPetIdUploadImageResponseByPost {
  code?: number;
  type?: string;
  message?: string;
}
/**
 * @description uploads an image
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export function apiV3PetPetIdUploadImageByPost(
  data: ApiV3PetPetIdUploadImageRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetPetIdUploadImageResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3PetPetIdUploadImageByPost.requestConfig),
    ...args
  );
}
apiV3PetPetIdUploadImageByPost.requestConfig = {
  path: '/api/v3/pet/{petId}/uploadImage',
  method: 'POST',
  requestContentType: ['application/octet-stream'],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: ['additionalMetadata'],
};
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities
 * @summary Request data types
 * @url [ GET ] /api/v3/store/inventory
 */
export type ApiV3StoreInventoryRequestByGet = Record<string, any>;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities
 * @summary Response data types
 * @url [ GET ] /api/v3/store/inventory
 */
export type ApiV3StoreInventoryResponseByGet = any;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities
 * @url [ GET ] /api/v3/store/inventory
 */
export function apiV3StoreInventoryByGet(
  data: ApiV3StoreInventoryRequestByGet = {},
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3StoreInventoryResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3StoreInventoryByGet.requestConfig),
    ...args
  );
}
apiV3StoreInventoryByGet.requestConfig = {
  path: '/api/v3/store/inventory',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [],
};
/**
 * @description Place an order for a pet、Place a new order in the store
 * @summary Request data types
 * @url [ POST ] /api/v3/store/order
 */
export interface ApiV3StoreOrderRequestByPost {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
 * @description Place an order for a pet、Place a new order in the store
 * @summary Response data types
 * @url [ POST ] /api/v3/store/order
 */
export interface ApiV3StoreOrderResponseByPost {
  id?: string;
  petId?: string;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
/**
 * @description Place an order for a pet、Place a new order in the store
 * @url [ POST ] /api/v3/store/order
 */
export function apiV3StoreOrderByPost(
  data: ApiV3StoreOrderRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3StoreOrderResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3StoreOrderByPost.requestConfig),
    ...args
  );
}
apiV3StoreOrderByPost.requestConfig = {
  path: '/api/v3/store/order',
  method: 'POST',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [],
};
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Request data types
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export interface ApiV3StoreOrderOrderIdRequestByGet {
  // ID of order that needs to be fetched
  orderId: string;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Response data types
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export interface ApiV3StoreOrderOrderIdResponseByGet {
  id?: string;
  petId?: string;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export function apiV3StoreOrderOrderIdByGet(
  data: ApiV3StoreOrderOrderIdRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3StoreOrderOrderIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3StoreOrderOrderIdByGet.requestConfig),
    ...args
  );
}
apiV3StoreOrderOrderIdByGet.requestConfig = {
  path: '/api/v3/store/order/{orderId}',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['orderId'],
  queryStringKeyNameList: [],
};
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Request data types
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export interface ApiV3StoreOrderOrderIdRequestByDelete {
  // ID of the order that needs to be deleted
  orderId: string;
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Response data types
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export type ApiV3StoreOrderOrderIdResponseByDelete = any;
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export function apiV3StoreOrderOrderIdByDelete(
  data: ApiV3StoreOrderOrderIdRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3StoreOrderOrderIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, apiV3StoreOrderOrderIdByDelete.requestConfig),
    ...args
  );
}
apiV3StoreOrderOrderIdByDelete.requestConfig = {
  path: '/api/v3/store/order/{orderId}',
  method: 'DELETE',
  requestContentType: [],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['orderId'],
  queryStringKeyNameList: [],
};
/**
 * @description Create user、This can only be done by the logged in user.
 * @summary Request data types
 * @url [ POST ] /api/v3/user
 */
export interface ApiV3UserRequestByPost {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
 * @description Create user、This can only be done by the logged in user.
 * @summary Response data types
 * @url [ POST ] /api/v3/user
 */
export type ApiV3UserResponseByPost = any;
/**
 * @description Create user、This can only be done by the logged in user.
 * @url [ POST ] /api/v3/user
 */
export function apiV3UserByPost(data: ApiV3UserRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserResponseByPost>(processRequestFunctionConfig(data, extraData, apiV3UserByPost.requestConfig), ...args);
}
apiV3UserByPost.requestConfig = {
  path: '/api/v3/user',
  method: 'POST',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [],
};
/**
 * @description Creates list of users with given input array、Creates list of users with given input array
 * @summary Request data types
 * @url [ POST ] /api/v3/user/createWithList
 */
export type ApiV3UserCreateWithListRequestByPost = Array<{
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}>;
/**
 * @description Creates list of users with given input array、Creates list of users with given input array
 * @summary Response data types
 * @url [ POST ] /api/v3/user/createWithList
 */
export interface ApiV3UserCreateWithListResponseByPost {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Creates list of users with given input array、Creates list of users with given input array
 * @url [ POST ] /api/v3/user/createWithList
 */
export function apiV3UserCreateWithListByPost(
  data: ApiV3UserCreateWithListRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserCreateWithListResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3UserCreateWithListByPost.requestConfig),
    ...args
  );
}
apiV3UserCreateWithListByPost.requestConfig = {
  path: '/api/v3/user/createWithList',
  method: 'POST',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [],
};
/**
 * @description Logs user into the system
 * @summary Request data types
 * @url [ GET ] /api/v3/user/login
 */
export interface ApiV3UserLoginRequestByGet {
  // The user name for login
  username: string;
  // The password for login in clear text
  password: string;
}
/**
 * @description Logs user into the system
 * @summary Response data types
 * @url [ GET ] /api/v3/user/login
 */
export type ApiV3UserLoginResponseByGet = string;
/**
 * @description Logs user into the system
 * @url [ GET ] /api/v3/user/login
 */
export function apiV3UserLoginByGet(data: ApiV3UserLoginRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserLoginResponseByGet>(processRequestFunctionConfig(data, extraData, apiV3UserLoginByGet.requestConfig), ...args);
}
apiV3UserLoginByGet.requestConfig = {
  path: '/api/v3/user/login',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['username', 'password'],
};
/**
 * @description Logs out current logged in user session
 * @summary Request data types
 * @url [ GET ] /api/v3/user/logout
 */
export type ApiV3UserLogoutRequestByGet = Record<string, any>;
/**
 * @description Logs out current logged in user session
 * @summary Response data types
 * @url [ GET ] /api/v3/user/logout
 */
export type ApiV3UserLogoutResponseByGet = any;
/**
 * @description Logs out current logged in user session
 * @url [ GET ] /api/v3/user/logout
 */
export function apiV3UserLogoutByGet(
  data: ApiV3UserLogoutRequestByGet = {},
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserLogoutResponseByGet>(processRequestFunctionConfig(data, extraData, apiV3UserLogoutByGet.requestConfig), ...args);
}
apiV3UserLogoutByGet.requestConfig = {
  path: '/api/v3/user/logout',
  method: 'GET',
  requestContentType: [],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [],
};
/**
 * @description Get user by user name
 * @summary Request data types
 * @url [ GET ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameRequestByGet {
  // The name that needs to be fetched. Use user1 for testing.
  username1: string;
}
/**
 * @description Get user by user name
 * @summary Response data types
 * @url [ GET ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameResponseByGet {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Get user by user name
 * @url [ GET ] /api/v3/user/{username}
 */
export function apiV3UserUsernameByGet(
  data: ApiV3UserUsernameRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserUsernameResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3UserUsernameByGet.requestConfig),
    ...args
  );
}
apiV3UserUsernameByGet.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username1'],
  queryStringKeyNameList: [],
};
/**
 * @description Update user、This can only be done by the logged in user.
 * @summary Request data types
 * @url [ PUT ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameRequestByPut {
  // name that need to be deleted
  username1: string;
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
 * @description Update user、This can only be done by the logged in user.
 * @summary Response data types
 * @url [ PUT ] /api/v3/user/{username}
 */
export type ApiV3UserUsernameResponseByPut = any;
/**
 * @description Update user、This can only be done by the logged in user.
 * @url [ PUT ] /api/v3/user/{username}
 */
export function apiV3UserUsernameByPut(
  data: ApiV3UserUsernameRequestByPut,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserUsernameResponseByPut>(
    processRequestFunctionConfig(data, extraData, apiV3UserUsernameByPut.requestConfig),
    ...args
  );
}
apiV3UserUsernameByPut.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'PUT',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username1'],
  queryStringKeyNameList: [],
};
/**
 * @description Delete user、This can only be done by the logged in user.
 * @summary Request data types
 * @url [ DELETE ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameRequestByDelete {
  // The name that needs to be deleted
  username: string;
}
/**
 * @description Delete user、This can only be done by the logged in user.
 * @summary Response data types
 * @url [ DELETE ] /api/v3/user/{username}
 */
export type ApiV3UserUsernameResponseByDelete = any;
/**
 * @description Delete user、This can only be done by the logged in user.
 * @url [ DELETE ] /api/v3/user/{username}
 */
export function apiV3UserUsernameByDelete(
  data: ApiV3UserUsernameRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserUsernameResponseByDelete>(
    processRequestFunctionConfig(data, extraData, apiV3UserUsernameByDelete.requestConfig),
    ...args
  );
}
apiV3UserUsernameByDelete.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'DELETE',
  requestContentType: [],
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username'],
  queryStringKeyNameList: [],
};
/**
 * @description 查看排班列表、/api/tbt
 * @summary Request data types
 * @url [ GET ] /api/v3/api/tbf/arranging/work
 */
export interface ApiV3ApiTbfArrangingWorkRequestByGet {
  // 考勤组id
  groupId: string;
  // 成员名称
  realName: string;
  // 月份
  month: string;
  // 用户id集合
  userIds: Array<string>;
}
/**
 * @description 查看排班列表、/api/tbt
 * @summary Response data types
 * @url [ GET ] /api/v3/api/tbf/arranging/work
 */
export type ApiV3ApiTbfArrangingWorkResponseByGet = Array<{
  // 排班实体
  schedulesVO: {
    // 用户id
    userId: string;
    // 名称
    realName: string;
    // 是否移除(1移除)
    delMark: string;
    // 是否自己的考勤组
    selfGroup: string;
    val: {
      '2023-11-10'?: Array<{
        // 类型
        type: number;
        // 时段id
        periodId: string;
        // 开始时间点
        start: string;
        // 结束时间点
        end: string;
        // 下班时间是否为次日(1今日 2次日)
        isEndTomorrow: string;
        // 是否自己的考勤组
        selfGroup: string;
        // 排序
        sort: number;
      }>;
    };
  };
}>;
/**
 * @description 查看排班列表、/api/tbt
 * @url [ GET ] /api/v3/api/tbf/arranging/work
 */
export function apiV3ApiTbfArrangingWorkByGet(
  data: ApiV3ApiTbfArrangingWorkRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3ApiTbfArrangingWorkResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3ApiTbfArrangingWorkByGet.requestConfig),
    ...args
  );
}
apiV3ApiTbfArrangingWorkByGet.requestConfig = {
  path: '/api/v3/api/tbf/arranging/work',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['groupId', 'realName', 'month', 'userIds'],
};
"
`;

exports[`swagger v3 生成 typescript api 代码: 生成 typescript api 代码 1`] = `
"/* tslint:disable */
/* eslint-disable */
/* prettier-ignore-start */

/* 代码生成时间： */
/* 提示：该文件由 API Helper CLI 自动生成，请勿直接修改。 */
/* 文档参考：https://github.com/ztz2/api-helper */

// @ts-ignore
// prettier-ignore
import {
  RequestFunctionRestArgsType,
  processRequestFunctionConfig,
} from '@api-helper/cli/lib/helpers';
// @ts-ignore
// prettier-ignore
import request from './request';
// @ts-ignore
// prettier-ignore
type CurrentRequestFunctionRestArgsType = RequestFunctionRestArgsType<typeof request>;

/**
 * @description 兼容非标准的dot参数形式
 * @summary Request data types
 * @url [ GET ] /compatible-error-specification-dot-query-param
 */
export interface CompatibleErrorSpecificationDotQueryParamRequestByGet {
  // ID集合
  ids?: Array<string>;
  dept?: {
    // 创建者1号
    deptCreateBy1?: string;
    // 创建者2号
    deptCreateBy2?: string;
  };
  roles?: Array<{
    // 角色创建者1号
    roleCreateBy1?: string;
    // 角色创建时间
    roleCreateTime?: string;
  }>;
  // 有分页参数的话就加,根据你的实际查询参数编写
  '有分页参数的话就加,根据你的实际查询参数编写'?: string;
}
/**
 * @description 兼容非标准的dot参数形式
 * @summary Response data types
 * @url [ GET ] /compatible-error-specification-dot-query-param
 */
export type CompatibleErrorSpecificationDotQueryParamResponseByGet = any;
/**
 * @description 兼容非标准的dot参数形式
 * @url [ GET ] /compatible-error-specification-dot-query-param
 */
export function compatibleErrorSpecificationDotQueryParamByGet(
  data: CompatibleErrorSpecificationDotQueryParamRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<CompatibleErrorSpecificationDotQueryParamResponseByGet>(
    processRequestFunctionConfig(data, extraData, compatibleErrorSpecificationDotQueryParamByGet.requestConfig),
    ...args
  );
}
compatibleErrorSpecificationDotQueryParamByGet.requestConfig = {
  path: '/compatible-error-specification-dot-query-param',
  method: 'GET',
  requestContentType: ['application/json'],
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['ids', 'dept', 'roles', '有分页参数的话就加,根据你的实际查询参数编写'],
};
"
`;
