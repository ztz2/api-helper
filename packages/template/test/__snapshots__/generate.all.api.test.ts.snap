// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`生成全部API函数 OpenAPI-2.0-source生成全部API函数: OpenAPI-2.0-source生成全部API函数 1`] = `
"/**
 * @description uploads an image【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
export interface V2PetPetIdUploadImageRequestByPost {
  // ID of pet to update
  petId: string;
  // Additional data to pass to server
  additionalMetadata?: string;
  // file to upload
  file?: File;
}
/**
 * @description uploads an image【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
export interface V2PetPetIdUploadImageResponseByPost {
  code: number;
  type: string;
  message: string;
}
/**
   * @description uploads an image
   * @url [ POST ] /v2/pet/{petId}/uploadImage
   */
export function v2PetPetIdUploadImageByPost(data: V2PetPetIdUploadImageRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdUploadImageResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdUploadImageByPost.requestConfig),
    ...args
  );
}
v2PetPetIdUploadImageByPost.requestConfig = {
  path: '/v2/pet/{petId}/uploadImage',
  method: 'POST',
  formDataKeyNameList: [\\"additionalMetadata\\",\\"file\\"],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Add a new pet to the store【请求数据类型定义】
 * @url [ POST ] /v2/pet
 */
export interface V2PetRequestByPost {
  id?: string;
  category?: {
    id?: string;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store【响应数据类型定义】
 * @url [ POST ] /v2/pet
 */
export type V2PetResponseByPost = any;
/**
   * @description Add a new pet to the store
   * @url [ POST ] /v2/pet
   */
export function v2PetByPost(data: V2PetRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetByPost.requestConfig),
    ...args
  );
}
v2PetByPost.requestConfig = {
  path: '/v2/pet',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Update an existing pet【请求数据类型定义】
 * @url [ PUT ] /v2/pet
 */
export interface V2PetRequestByPut {
  id?: string;
  category?: {
    id?: string;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet【响应数据类型定义】
 * @url [ PUT ] /v2/pet
 */
export type V2PetResponseByPut = any;
/**
   * @description Update an existing pet
   * @url [ PUT ] /v2/pet
   */
export function v2PetByPut(data: V2PetRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetResponseByPut>(
    processRequestFunctionConfig(data, extraData, v2PetByPut.requestConfig),
    ...args
  );
}
v2PetByPut.requestConfig = {
  path: '/v2/pet',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
export interface V2PetFindByStatusRequestByGet {
  // Status values that need to be considered for filter
  status: Array<'available' | 'pending' | 'sold'>;
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
export type V2PetFindByStatusResponseByGet = Array<{
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
   * @url [ GET ] /v2/pet/findByStatus
   */
export function v2PetFindByStatusByGet(data: V2PetFindByStatusRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetFindByStatusResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetFindByStatusByGet.requestConfig),
    ...args
  );
}
v2PetFindByStatusByGet.requestConfig = {
  path: '/v2/pet/findByStatus',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"status\\"]
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
export interface V2PetFindByTagsRequestByGet {
  // Tags to filter by
  tags: Array<string>;
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
export type V2PetFindByTagsResponseByGet = Array<{
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @url [ GET ] /v2/pet/findByTags
   */
export function v2PetFindByTagsByGet(data: V2PetFindByTagsRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetFindByTagsResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetFindByTagsByGet.requestConfig),
    ...args
  );
}
v2PetFindByTagsByGet.requestConfig = {
  path: '/v2/pet/findByTags',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"tags\\"]
}
/**
 * @description Find pet by ID、Returns a single pet【请求数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
export interface V2PetPetIdRequestByGet {
  // ID of pet to return
  petId: string;
}
/**
 * @description Find pet by ID、Returns a single pet【响应数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
export interface V2PetPetIdResponseByGet {
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
   * @description Find pet by ID、Returns a single pet
   * @url [ GET ] /v2/pet/{petId}
   */
export function v2PetPetIdByGet(data: V2PetPetIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByGet.requestConfig),
    ...args
  );
}
v2PetPetIdByGet.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Updates a pet in the store with form data【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
export interface V2PetPetIdRequestByPost {
  // ID of pet that needs to be updated
  petId: string;
  // Updated name of the pet
  name?: string;
  // Updated status of the pet
  status?: string;
}
/**
 * @description Updates a pet in the store with form data【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
export type V2PetPetIdResponseByPost = any;
/**
   * @description Updates a pet in the store with form data
   * @url [ POST ] /v2/pet/{petId}
   */
export function v2PetPetIdByPost(data: V2PetPetIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByPost.requestConfig),
    ...args
  );
}
v2PetPetIdByPost.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'POST',
  formDataKeyNameList: [\\"name\\",\\"status\\"],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Deletes a pet【请求数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
export interface V2PetPetIdRequestByDelete {
  // Pet id to delete
  petId: string;
}
/**
 * @description Deletes a pet【响应数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
export type V2PetPetIdResponseByDelete = any;
/**
   * @description Deletes a pet
   * @url [ DELETE ] /v2/pet/{petId}
   */
export function v2PetPetIdByDelete(data: V2PetPetIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByDelete.requestConfig),
    ...args
  );
}
v2PetPetIdByDelete.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Place an order for a pet【请求数据类型定义】
 * @url [ POST ] /v2/store/order
 */
export interface V2StoreOrderRequestByPost {
  id?: string;
  petId?: string;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
/**
 * @description Place an order for a pet【响应数据类型定义】
 * @url [ POST ] /v2/store/order
 */
export interface V2StoreOrderResponseByPost {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
   * @description Place an order for a pet
   * @url [ POST ] /v2/store/order
   */
export function v2StoreOrderByPost(data: V2StoreOrderRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderByPost.requestConfig),
    ...args
  );
}
v2StoreOrderByPost.requestConfig = {
  path: '/v2/store/order',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【请求数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
export interface V2StoreOrderOrderIdRequestByGet {
  // ID of pet that needs to be fetched
  orderId: string;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【响应数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
export interface V2StoreOrderOrderIdResponseByGet {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
   * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
   * @url [ GET ] /v2/store/order/{orderId}
   */
export function v2StoreOrderOrderIdByGet(data: V2StoreOrderOrderIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderOrderIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderOrderIdByGet.requestConfig),
    ...args
  );
}
v2StoreOrderOrderIdByGet.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【请求数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
export interface V2StoreOrderOrderIdRequestByDelete {
  // ID of the order that needs to be deleted
  orderId: string;
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【响应数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
export type V2StoreOrderOrderIdResponseByDelete = any;
/**
   * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   * @url [ DELETE ] /v2/store/order/{orderId}
   */
export function v2StoreOrderOrderIdByDelete(data: V2StoreOrderOrderIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderOrderIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderOrderIdByDelete.requestConfig),
    ...args
  );
}
v2StoreOrderOrderIdByDelete.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【请求数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
export type V2StoreInventoryRequestByGet = Record<string, any>;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【响应数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
export type V2StoreInventoryResponseByGet = any;
/**
   * @description Returns pet inventories by status、Returns a map of status codes to quantities
   * @url [ GET ] /v2/store/inventory
   */
export function v2StoreInventoryByGet(data: V2StoreInventoryRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreInventoryResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2StoreInventoryByGet.requestConfig),
    ...args
  );
}
v2StoreInventoryByGet.requestConfig = {
  path: '/v2/store/inventory',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
export type V2UserCreateWithArrayRequestByPost = Array<{
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}>;
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
export type V2UserCreateWithArrayResponseByPost = any;
/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithArray
   */
export function v2UserCreateWithArrayByPost(data: V2UserCreateWithArrayRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserCreateWithArrayResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserCreateWithArrayByPost.requestConfig),
    ...args
  );
}
v2UserCreateWithArrayByPost.requestConfig = {
  path: '/v2/user/createWithArray',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
export type V2UserCreateWithListRequestByPost = Array<{
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}>;
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
export type V2UserCreateWithListResponseByPost = any;
/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithList
   */
export function v2UserCreateWithListByPost(data: V2UserCreateWithListRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserCreateWithListResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserCreateWithListByPost.requestConfig),
    ...args
  );
}
v2UserCreateWithListByPost.requestConfig = {
  path: '/v2/user/createWithList',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Get user by user name【请求数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
export interface V2UserUsernameRequestByGet {
  // The name that needs to be fetched. Use user1 for testing.
  username: string;
}
/**
 * @description Get user by user name【响应数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
export interface V2UserUsernameResponseByGet {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
   * @description Get user by user name
   * @url [ GET ] /v2/user/{username}
   */
export function v2UserUsernameByGet(data: V2UserUsernameRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByGet.requestConfig),
    ...args
  );
}
v2UserUsernameByGet.requestConfig = {
  path: '/v2/user/{username}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username\\"],
  queryStringKeyNameList: []
}
/**
 * @description Updated user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
export interface V2UserUsernameRequestByPut {
  // name that need to be updated
  username: string;
  id?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Updated user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
export type V2UserUsernameResponseByPut = any;
/**
   * @description Updated user、This can only be done by the logged in user.
   * @url [ PUT ] /v2/user/{username}
   */
export function v2UserUsernameByPut(data: V2UserUsernameRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByPut>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByPut.requestConfig),
    ...args
  );
}
v2UserUsernameByPut.requestConfig = {
  path: '/v2/user/{username}',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username\\"],
  queryStringKeyNameList: []
}
/**
 * @description Delete user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
export interface V2UserUsernameRequestByDelete {
  // The name that needs to be deleted
  username: string;
}
/**
 * @description Delete user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
export type V2UserUsernameResponseByDelete = any;
/**
   * @description Delete user、This can only be done by the logged in user.
   * @url [ DELETE ] /v2/user/{username}
   */
export function v2UserUsernameByDelete(data: V2UserUsernameRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByDelete.requestConfig),
    ...args
  );
}
v2UserUsernameByDelete.requestConfig = {
  path: '/v2/user/{username}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username\\"],
  queryStringKeyNameList: []
}
/**
 * @description Logs user into the system【请求数据类型定义】
 * @url [ GET ] /v2/user/login
 */
export interface V2UserLoginRequestByGet {
  // The user name for login
  username: string;
  // The password for login in clear text
  password: string;
}
/**
 * @description Logs user into the system【响应数据类型定义】
 * @url [ GET ] /v2/user/login
 */
export type V2UserLoginResponseByGet = string;
/**
   * @description Logs user into the system
   * @url [ GET ] /v2/user/login
   */
export function v2UserLoginByGet(data: V2UserLoginRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserLoginResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserLoginByGet.requestConfig),
    ...args
  );
}
v2UserLoginByGet.requestConfig = {
  path: '/v2/user/login',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"username\\",\\"password\\"]
}
/**
 * @description Logs out current logged in user session【请求数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
export type V2UserLogoutRequestByGet = Record<string, any>;
/**
 * @description Logs out current logged in user session【响应数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
export type V2UserLogoutResponseByGet = any;
/**
   * @description Logs out current logged in user session
   * @url [ GET ] /v2/user/logout
   */
export function v2UserLogoutByGet(data: V2UserLogoutRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserLogoutResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserLogoutByGet.requestConfig),
    ...args
  );
}
v2UserLogoutByGet.requestConfig = {
  path: '/v2/user/logout',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Create user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ POST ] /v2/user
 */
export interface V2UserRequestByPost {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Create user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ POST ] /v2/user
 */
export type V2UserResponseByPost = any;
/**
   * @description Create user、This can only be done by the logged in user.
   * @url [ POST ] /v2/user
   */
export function v2UserByPost(data: V2UserRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserByPost.requestConfig),
    ...args
  );
}
v2UserByPost.requestConfig = {
  path: '/v2/user',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}"
`;

exports[`生成全部API函数 OpenAPI-2.0生成全部API函数: OpenAPI-2.0生成全部API函数 1`] = `
"/**
 * @description uploads an image【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
export interface V2PetPetIdUploadImageRequestByPost {
  // ID of pet  * 换行符测试 * to update
  petId: string;
  // Additional data to pass to server
  additionalMetadata?: string;
  // file to upload
  file?: File;
}
/**
 * @description uploads an image【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
export interface V2PetPetIdUploadImageResponseByPost {
  code: number;
  type: string;
  message: string;
}
/**
   * @description uploads an image
   * @url [ POST ] /v2/pet/{petId}/uploadImage
   */
export function v2PetPetIdUploadImageByPost(data: V2PetPetIdUploadImageRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdUploadImageResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdUploadImageByPost.requestConfig),
    ...args
  );
}
v2PetPetIdUploadImageByPost.requestConfig = {
  path: '/v2/pet/{petId}/uploadImage',
  method: 'POST',
  formDataKeyNameList: [\\"additionalMetadata\\",\\"file\\"],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Add a new pet to the store【请求数据类型定义】
 * @url [ POST ] /v2/pet
 */
export interface V2PetRequestByPost {
  id?: string;
  category?: {
    id?: string;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store【响应数据类型定义】
 * @url [ POST ] /v2/pet
 */
export type V2PetResponseByPost = any;
/**
   * @description Add a new pet to the store
   * @url [ POST ] /v2/pet
   */
export function v2PetByPost(data: V2PetRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetByPost.requestConfig),
    ...args
  );
}
v2PetByPost.requestConfig = {
  path: '/v2/pet',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Update an existing pet【请求数据类型定义】
 * @url [ PUT ] /v2/pet
 */
export interface V2PetRequestByPut {
  id?: string;
  category?: {
    id?: string;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet【响应数据类型定义】
 * @url [ PUT ] /v2/pet
 */
export type V2PetResponseByPut = any;
/**
   * @description Update an existing pet
   * @url [ PUT ] /v2/pet
   */
export function v2PetByPut(data: V2PetRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetResponseByPut>(
    processRequestFunctionConfig(data, extraData, v2PetByPut.requestConfig),
    ...args
  );
}
v2PetByPut.requestConfig = {
  path: '/v2/pet',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
export interface V2PetFindByStatusRequestByGet {
  // Status values that need to be considered for filter
  status: Array<'available' | 'pending' | 'sold'>;
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
export type V2PetFindByStatusResponseByGet = Array<{
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
   * @url [ GET ] /v2/pet/findByStatus
   */
export function v2PetFindByStatusByGet(data: V2PetFindByStatusRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetFindByStatusResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetFindByStatusByGet.requestConfig),
    ...args
  );
}
v2PetFindByStatusByGet.requestConfig = {
  path: '/v2/pet/findByStatus',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"status\\"]
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
export interface V2PetFindByTagsRequestByGet {
  // Tags to filter by
  tags: Array<string>;
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
export type V2PetFindByTagsResponseByGet = Array<{
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @url [ GET ] /v2/pet/findByTags
   */
export function v2PetFindByTagsByGet(data: V2PetFindByTagsRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetFindByTagsResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetFindByTagsByGet.requestConfig),
    ...args
  );
}
v2PetFindByTagsByGet.requestConfig = {
  path: '/v2/pet/findByTags',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"tags\\"]
}
/**
 * @description Find pet by ID、Returns a single pet【请求数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
export interface V2PetPetIdRequestByGet {
  // ID of pet to return
  petId: string;
}
/**
 * @description Find pet by ID、Returns a single pet【响应数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
export interface V2PetPetIdResponseByGet {
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
   * @description Find pet by ID、Returns a single pet
   * @url [ GET ] /v2/pet/{petId}
   */
export function v2PetPetIdByGet(data: V2PetPetIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByGet.requestConfig),
    ...args
  );
}
v2PetPetIdByGet.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Updates a pet in the store with form data【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
export interface V2PetPetIdRequestByPost {
  // ID of pet that needs to be updated
  petId: string;
  // Updated name of the pet
  name?: string;
  // Updated status of the pet
  status?: string;
}
/**
 * @description Updates a pet in the store with form data【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
export type V2PetPetIdResponseByPost = any;
/**
   * @description Updates a pet in the store with form data
   * @url [ POST ] /v2/pet/{petId}
   */
export function v2PetPetIdByPost(data: V2PetPetIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByPost.requestConfig),
    ...args
  );
}
v2PetPetIdByPost.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'POST',
  formDataKeyNameList: [\\"name\\",\\"status\\"],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Deletes a pet【请求数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
export interface V2PetPetIdRequestByDelete {
  // Pet id to delete
  petId: string;
}
/**
 * @description Deletes a pet【响应数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
export type V2PetPetIdResponseByDelete = any;
/**
   * @description Deletes a pet
   * @url [ DELETE ] /v2/pet/{petId}
   */
export function v2PetPetIdByDelete(data: V2PetPetIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByDelete.requestConfig),
    ...args
  );
}
v2PetPetIdByDelete.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Place an order for a pet【请求数据类型定义】
 * @url [ POST ] /v2/store/order
 */
export interface V2StoreOrderRequestByPost {
  id?: string;
  petId?: string;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  // Order Tag
  tag?: Array<
    // Order Tag Child
    Array<{
      tagName?: 'error' | 'waring' | 'info';
    }>
  >;
  complete?: boolean;
}
/**
 * @description Place an order for a pet【响应数据类型定义】
 * @url [ POST ] /v2/store/order
 */
export interface V2StoreOrderResponseByPost {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  // Order Tag
  tag: Array<
    // Order Tag Child
    Array<{
      tagName: 'error' | 'waring' | 'info';
    }>
  >;
  complete: boolean;
}
/**
   * @description Place an order for a pet
   * @url [ POST ] /v2/store/order
   */
export function v2StoreOrderByPost(data: V2StoreOrderRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderByPost.requestConfig),
    ...args
  );
}
v2StoreOrderByPost.requestConfig = {
  path: '/v2/store/order',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【请求数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
export interface V2StoreOrderOrderIdRequestByGet {
  // ID of pet that needs to be fetched
  orderId: string;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【响应数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
export interface V2StoreOrderOrderIdResponseByGet {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  // Order Tag
  tag: Array<
    // Order Tag Child
    Array<{
      tagName: 'error' | 'waring' | 'info';
    }>
  >;
  complete: boolean;
}
/**
   * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
   * @url [ GET ] /v2/store/order/{orderId}
   */
export function v2StoreOrderOrderIdByGet(data: V2StoreOrderOrderIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderOrderIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderOrderIdByGet.requestConfig),
    ...args
  );
}
v2StoreOrderOrderIdByGet.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【请求数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
export interface V2StoreOrderOrderIdRequestByDelete {
  // ID of the order that needs to be deleted
  orderId: string;
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【响应数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
export type V2StoreOrderOrderIdResponseByDelete = any;
/**
   * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   * @url [ DELETE ] /v2/store/order/{orderId}
   */
export function v2StoreOrderOrderIdByDelete(data: V2StoreOrderOrderIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderOrderIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderOrderIdByDelete.requestConfig),
    ...args
  );
}
v2StoreOrderOrderIdByDelete.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【请求数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
export type V2StoreInventoryRequestByGet = Record<string, any>;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【响应数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
export type V2StoreInventoryResponseByGet = any;
/**
   * @description Returns pet inventories by status、Returns a map of status codes to quantities
   * @url [ GET ] /v2/store/inventory
   */
export function v2StoreInventoryByGet(data: V2StoreInventoryRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreInventoryResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2StoreInventoryByGet.requestConfig),
    ...args
  );
}
v2StoreInventoryByGet.requestConfig = {
  path: '/v2/store/inventory',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
export interface V2UserCreateWithArrayRequestByPost {
  // List of user object
  userName: Array<string>;
  // The password for login in clear text
  password: string;
  // The name that needs to be fetched. Use user1 for testing.
  userId: number;
}
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
export type V2UserCreateWithArrayResponseByPost = any;
/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithArray
   */
export function v2UserCreateWithArrayByPost(data: V2UserCreateWithArrayRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserCreateWithArrayResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserCreateWithArrayByPost.requestConfig),
    ...args
  );
}
v2UserCreateWithArrayByPost.requestConfig = {
  path: '/v2/user/createWithArray',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"userId\\"],
  queryStringKeyNameList: [\\"userName\\",\\"password\\"]
}
/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
export type V2UserCreateWithListRequestByPost = Array<{
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}>;
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
export type V2UserCreateWithListResponseByPost = any;
/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithList
   */
export function v2UserCreateWithListByPost(data: V2UserCreateWithListRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserCreateWithListResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserCreateWithListByPost.requestConfig),
    ...args
  );
}
v2UserCreateWithListByPost.requestConfig = {
  path: '/v2/user/createWithList',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Get user by user name【请求数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
export interface V2UserUsernameRequestByGet {
  // The name that needs to be fetched. Use user1 for testing.
  username1: string;
}
/**
 * @description Get user by user name【响应数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
export interface V2UserUsernameResponseByGet {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
   * @description Get user by user name
   * @url [ GET ] /v2/user/{username}
   */
export function v2UserUsernameByGet(data: V2UserUsernameRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByGet.requestConfig),
    ...args
  );
}
v2UserUsernameByGet.requestConfig = {
  path: '/v2/user/{username}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username1\\"],
  queryStringKeyNameList: []
}
/**
 * @description Updated user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
export interface V2UserUsernameRequestByPut {
  // name that need to be updated
  username: string;
  id?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Updated user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
export type V2UserUsernameResponseByPut = any;
/**
   * @description Updated user、This can only be done by the logged in user.
   * @url [ PUT ] /v2/user/{username}
   */
export function v2UserUsernameByPut(data: V2UserUsernameRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByPut>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByPut.requestConfig),
    ...args
  );
}
v2UserUsernameByPut.requestConfig = {
  path: '/v2/user/{username}',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username\\"],
  queryStringKeyNameList: []
}
/**
 * @description Delete user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
export interface V2UserUsernameRequestByDelete {
  // The name that needs to be deleted
  username1: string;
}
/**
 * @description Delete user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
export type V2UserUsernameResponseByDelete = any;
/**
   * @description Delete user、This can only be done by the logged in user.
   * @url [ DELETE ] /v2/user/{username}
   */
export function v2UserUsernameByDelete(data: V2UserUsernameRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByDelete.requestConfig),
    ...args
  );
}
v2UserUsernameByDelete.requestConfig = {
  path: '/v2/user/{username}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username1\\"],
  queryStringKeyNameList: []
}
/**
 * @description Logs user into the system【请求数据类型定义】
 * @url [ GET ] /v2/user/login
 */
export interface V2UserLoginRequestByGet {
  // The user name for login
  username: string;
  // The password for login in clear text
  password: string;
}
/**
 * @description Logs user into the system【响应数据类型定义】
 * @url [ GET ] /v2/user/login
 */
export type V2UserLoginResponseByGet = string;
/**
   * @description Logs user into the system
   * @url [ GET ] /v2/user/login
   */
export function v2UserLoginByGet(data: V2UserLoginRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserLoginResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserLoginByGet.requestConfig),
    ...args
  );
}
v2UserLoginByGet.requestConfig = {
  path: '/v2/user/login',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"username\\",\\"password\\"]
}
/**
 * @description Logs out current logged in user session【请求数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
export type V2UserLogoutRequestByGet = Record<string, any>;
/**
 * @description Logs out current logged in user session【响应数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
export type V2UserLogoutResponseByGet = any;
/**
   * @description Logs out current logged in user session
   * @url [ GET ] /v2/user/logout
   */
export function v2UserLogoutByGet(data: V2UserLogoutRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserLogoutResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserLogoutByGet.requestConfig),
    ...args
  );
}
v2UserLogoutByGet.requestConfig = {
  path: '/v2/user/logout',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Create user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ POST ] /v2/user
 */
export interface V2UserRequestByPost {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Create user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ POST ] /v2/user
 */
export type V2UserResponseByPost = any;
/**
   * @description Create user、This can only be done by the logged in user.
   * @url [ POST ] /v2/user
   */
export function v2UserByPost(data: V2UserRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserByPost.requestConfig),
    ...args
  );
}
v2UserByPost.requestConfig = {
  path: '/v2/user',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}"
`;

exports[`生成全部API函数 OpenAPI-2.0生成全部类型申明: OpenAPI-2.0生成全部类型申明 1`] = `
"/**
 * @description uploads an image【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
declare interface V2PetPetIdUploadImageRequestByPost {
  // ID of pet  * 换行符测试 * to update
  petId: string;
  // Additional data to pass to server
  additionalMetadata?: string;
  // file to upload
  file?: File;
}
/**
 * @description uploads an image【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
declare interface V2PetPetIdUploadImageResponseByPost {
  code: number;
  type: string;
  message: string;
}
/**
   * @description uploads an image
   * @url [ POST ] /v2/pet/{petId}/uploadImage
   */
declare const v2PetPetIdUploadImageByPost: {
  (data: V2PetPetIdUploadImageRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetPetIdUploadImageResponseByPost>;
  readonly requestConfig: {
    path: '/v2/pet/{petId}/uploadImage',
    method: 'post',
    formDataKeyNameList: [\\"additionalMetadata\\",\\"file\\"],
    pathParamKeyNameList: [\\"petId\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description uploads an image
   * @url [ POST ] /v2/pet/{petId}/uploadImage
   */
export function v2PetPetIdUploadImageByPost(data: V2PetPetIdUploadImageRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdUploadImageResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdUploadImageByPost.requestConfig),
    ...args
  );
}
v2PetPetIdUploadImageByPost.requestConfig = {
  path: '/v2/pet/{petId}/uploadImage',
  method: 'POST',
  formDataKeyNameList: [\\"additionalMetadata\\",\\"file\\"],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Add a new pet to the store【请求数据类型定义】
 * @url [ POST ] /v2/pet
 */
declare interface V2PetRequestByPost {
  id?: string;
  category?: {
    id?: string;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store【响应数据类型定义】
 * @url [ POST ] /v2/pet
 */
declare type V2PetResponseByPost = any;
/**
   * @description Add a new pet to the store
   * @url [ POST ] /v2/pet
   */
declare const v2PetByPost: {
  (data: V2PetRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetResponseByPost>;
  readonly requestConfig: {
    path: '/v2/pet',
    method: 'post',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: []
  }
};/**
   * @description Add a new pet to the store
   * @url [ POST ] /v2/pet
   */
export function v2PetByPost(data: V2PetRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetByPost.requestConfig),
    ...args
  );
}
v2PetByPost.requestConfig = {
  path: '/v2/pet',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Update an existing pet【请求数据类型定义】
 * @url [ PUT ] /v2/pet
 */
declare interface V2PetRequestByPut {
  id?: string;
  category?: {
    id?: string;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet【响应数据类型定义】
 * @url [ PUT ] /v2/pet
 */
declare type V2PetResponseByPut = any;
/**
   * @description Update an existing pet
   * @url [ PUT ] /v2/pet
   */
declare const v2PetByPut: {
  (data: V2PetRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetResponseByPut>;
  readonly requestConfig: {
    path: '/v2/pet',
    method: 'put',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: []
  }
};/**
   * @description Update an existing pet
   * @url [ PUT ] /v2/pet
   */
export function v2PetByPut(data: V2PetRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetResponseByPut>(
    processRequestFunctionConfig(data, extraData, v2PetByPut.requestConfig),
    ...args
  );
}
v2PetByPut.requestConfig = {
  path: '/v2/pet',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
declare interface V2PetFindByStatusRequestByGet {
  // Status values that need to be considered for filter
  status: Array<'available' | 'pending' | 'sold'>;
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
declare type V2PetFindByStatusResponseByGet = Array<{
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
   * @url [ GET ] /v2/pet/findByStatus
   */
declare const v2PetFindByStatusByGet: {
  (data: V2PetFindByStatusRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetFindByStatusResponseByGet>;
  readonly requestConfig: {
    path: '/v2/pet/findByStatus',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: [\\"status\\"]
  }
};/**
   * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
   * @url [ GET ] /v2/pet/findByStatus
   */
export function v2PetFindByStatusByGet(data: V2PetFindByStatusRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetFindByStatusResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetFindByStatusByGet.requestConfig),
    ...args
  );
}
v2PetFindByStatusByGet.requestConfig = {
  path: '/v2/pet/findByStatus',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"status\\"]
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
declare interface V2PetFindByTagsRequestByGet {
  // Tags to filter by
  tags: Array<string>;
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
declare type V2PetFindByTagsResponseByGet = Array<{
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @url [ GET ] /v2/pet/findByTags
   */
declare const v2PetFindByTagsByGet: {
  (data: V2PetFindByTagsRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetFindByTagsResponseByGet>;
  readonly requestConfig: {
    path: '/v2/pet/findByTags',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: [\\"tags\\"]
  }
};/**
   * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @url [ GET ] /v2/pet/findByTags
   */
export function v2PetFindByTagsByGet(data: V2PetFindByTagsRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetFindByTagsResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetFindByTagsByGet.requestConfig),
    ...args
  );
}
v2PetFindByTagsByGet.requestConfig = {
  path: '/v2/pet/findByTags',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"tags\\"]
}
/**
 * @description Find pet by ID、Returns a single pet【请求数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
declare interface V2PetPetIdRequestByGet {
  // ID of pet to return
  petId: string;
}
/**
 * @description Find pet by ID、Returns a single pet【响应数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
declare interface V2PetPetIdResponseByGet {
  id: string;
  category: {
    id: string;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
   * @description Find pet by ID、Returns a single pet
   * @url [ GET ] /v2/pet/{petId}
   */
declare const v2PetPetIdByGet: {
  (data: V2PetPetIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetPetIdResponseByGet>;
  readonly requestConfig: {
    path: '/v2/pet/{petId}',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"petId\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Find pet by ID、Returns a single pet
   * @url [ GET ] /v2/pet/{petId}
   */
export function v2PetPetIdByGet(data: V2PetPetIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByGet.requestConfig),
    ...args
  );
}
v2PetPetIdByGet.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Updates a pet in the store with form data【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
declare interface V2PetPetIdRequestByPost {
  // ID of pet that needs to be updated
  petId: string;
  // Updated name of the pet
  name?: string;
  // Updated status of the pet
  status?: string;
}
/**
 * @description Updates a pet in the store with form data【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
declare type V2PetPetIdResponseByPost = any;
/**
   * @description Updates a pet in the store with form data
   * @url [ POST ] /v2/pet/{petId}
   */
declare const v2PetPetIdByPost: {
  (data: V2PetPetIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetPetIdResponseByPost>;
  readonly requestConfig: {
    path: '/v2/pet/{petId}',
    method: 'post',
    formDataKeyNameList: [\\"name\\",\\"status\\"],
    pathParamKeyNameList: [\\"petId\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Updates a pet in the store with form data
   * @url [ POST ] /v2/pet/{petId}
   */
export function v2PetPetIdByPost(data: V2PetPetIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByPost.requestConfig),
    ...args
  );
}
v2PetPetIdByPost.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'POST',
  formDataKeyNameList: [\\"name\\",\\"status\\"],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Deletes a pet【请求数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
declare interface V2PetPetIdRequestByDelete {
  // Pet id to delete
  petId: string;
}
/**
 * @description Deletes a pet【响应数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
declare type V2PetPetIdResponseByDelete = any;
/**
   * @description Deletes a pet
   * @url [ DELETE ] /v2/pet/{petId}
   */
declare const v2PetPetIdByDelete: {
  (data: V2PetPetIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2PetPetIdResponseByDelete>;
  readonly requestConfig: {
    path: '/v2/pet/{petId}',
    method: 'delete',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"petId\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Deletes a pet
   * @url [ DELETE ] /v2/pet/{petId}
   */
export function v2PetPetIdByDelete(data: V2PetPetIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2PetPetIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2PetPetIdByDelete.requestConfig),
    ...args
  );
}
v2PetPetIdByDelete.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Place an order for a pet【请求数据类型定义】
 * @url [ POST ] /v2/store/order
 */
declare interface V2StoreOrderRequestByPost {
  id?: string;
  petId?: string;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  // Order Tag
  tag?: Array<
    // Order Tag Child
    Array<{
      tagName?: 'error' | 'waring' | 'info';
    }>
  >;
  complete?: boolean;
}
/**
 * @description Place an order for a pet【响应数据类型定义】
 * @url [ POST ] /v2/store/order
 */
declare interface V2StoreOrderResponseByPost {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  // Order Tag
  tag: Array<
    // Order Tag Child
    Array<{
      tagName: 'error' | 'waring' | 'info';
    }>
  >;
  complete: boolean;
}
/**
   * @description Place an order for a pet
   * @url [ POST ] /v2/store/order
   */
declare const v2StoreOrderByPost: {
  (data: V2StoreOrderRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2StoreOrderResponseByPost>;
  readonly requestConfig: {
    path: '/v2/store/order',
    method: 'post',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: []
  }
};/**
   * @description Place an order for a pet
   * @url [ POST ] /v2/store/order
   */
export function v2StoreOrderByPost(data: V2StoreOrderRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderByPost.requestConfig),
    ...args
  );
}
v2StoreOrderByPost.requestConfig = {
  path: '/v2/store/order',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【请求数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
declare interface V2StoreOrderOrderIdRequestByGet {
  // ID of pet that needs to be fetched
  orderId: string;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【响应数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
declare interface V2StoreOrderOrderIdResponseByGet {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  // Order Tag
  tag: Array<
    // Order Tag Child
    Array<{
      tagName: 'error' | 'waring' | 'info';
    }>
  >;
  complete: boolean;
}
/**
   * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
   * @url [ GET ] /v2/store/order/{orderId}
   */
declare const v2StoreOrderOrderIdByGet: {
  (data: V2StoreOrderOrderIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2StoreOrderOrderIdResponseByGet>;
  readonly requestConfig: {
    path: '/v2/store/order/{orderId}',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"orderId\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
   * @url [ GET ] /v2/store/order/{orderId}
   */
export function v2StoreOrderOrderIdByGet(data: V2StoreOrderOrderIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderOrderIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderOrderIdByGet.requestConfig),
    ...args
  );
}
v2StoreOrderOrderIdByGet.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【请求数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
declare interface V2StoreOrderOrderIdRequestByDelete {
  // ID of the order that needs to be deleted
  orderId: string;
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【响应数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
declare type V2StoreOrderOrderIdResponseByDelete = any;
/**
   * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   * @url [ DELETE ] /v2/store/order/{orderId}
   */
declare const v2StoreOrderOrderIdByDelete: {
  (data: V2StoreOrderOrderIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2StoreOrderOrderIdResponseByDelete>;
  readonly requestConfig: {
    path: '/v2/store/order/{orderId}',
    method: 'delete',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"orderId\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   * @url [ DELETE ] /v2/store/order/{orderId}
   */
export function v2StoreOrderOrderIdByDelete(data: V2StoreOrderOrderIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreOrderOrderIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2StoreOrderOrderIdByDelete.requestConfig),
    ...args
  );
}
v2StoreOrderOrderIdByDelete.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【请求数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
declare type V2StoreInventoryRequestByGet = Record<string, any>;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【响应数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
declare type V2StoreInventoryResponseByGet = any;
/**
   * @description Returns pet inventories by status、Returns a map of status codes to quantities
   * @url [ GET ] /v2/store/inventory
   */
declare const v2StoreInventoryByGet: {
  (data?: V2StoreInventoryRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2StoreInventoryResponseByGet>;
  readonly requestConfig: {
    path: '/v2/store/inventory',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: []
  }
};/**
   * @description Returns pet inventories by status、Returns a map of status codes to quantities
   * @url [ GET ] /v2/store/inventory
   */
export function v2StoreInventoryByGet(data: V2StoreInventoryRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2StoreInventoryResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2StoreInventoryByGet.requestConfig),
    ...args
  );
}
v2StoreInventoryByGet.requestConfig = {
  path: '/v2/store/inventory',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
declare interface V2UserCreateWithArrayRequestByPost {
  // List of user object
  userName: Array<string>;
  // The password for login in clear text
  password: string;
  // The name that needs to be fetched. Use user1 for testing.
  userId: number;
}
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
declare type V2UserCreateWithArrayResponseByPost = any;
/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithArray
   */
declare const v2UserCreateWithArrayByPost: {
  (data: V2UserCreateWithArrayRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserCreateWithArrayResponseByPost>;
  readonly requestConfig: {
    path: '/v2/user/createWithArray',
    method: 'post',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"userId\\"],
    queryStringKeyNameList: [\\"userName\\",\\"password\\"]
  }
};/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithArray
   */
export function v2UserCreateWithArrayByPost(data: V2UserCreateWithArrayRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserCreateWithArrayResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserCreateWithArrayByPost.requestConfig),
    ...args
  );
}
v2UserCreateWithArrayByPost.requestConfig = {
  path: '/v2/user/createWithArray',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"userId\\"],
  queryStringKeyNameList: [\\"userName\\",\\"password\\"]
}
/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
declare type V2UserCreateWithListRequestByPost = Array<{
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}>;
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
declare type V2UserCreateWithListResponseByPost = any;
/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithList
   */
declare const v2UserCreateWithListByPost: {
  (data: V2UserCreateWithListRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserCreateWithListResponseByPost>;
  readonly requestConfig: {
    path: '/v2/user/createWithList',
    method: 'post',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: []
  }
};/**
   * @description Creates list of users with given input array
   * @url [ POST ] /v2/user/createWithList
   */
export function v2UserCreateWithListByPost(data: V2UserCreateWithListRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserCreateWithListResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserCreateWithListByPost.requestConfig),
    ...args
  );
}
v2UserCreateWithListByPost.requestConfig = {
  path: '/v2/user/createWithList',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Get user by user name【请求数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
declare interface V2UserUsernameRequestByGet {
  // The name that needs to be fetched. Use user1 for testing.
  username1: string;
}
/**
 * @description Get user by user name【响应数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
declare interface V2UserUsernameResponseByGet {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
   * @description Get user by user name
   * @url [ GET ] /v2/user/{username}
   */
declare const v2UserUsernameByGet: {
  (data: V2UserUsernameRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserUsernameResponseByGet>;
  readonly requestConfig: {
    path: '/v2/user/{username}',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"username1\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Get user by user name
   * @url [ GET ] /v2/user/{username}
   */
export function v2UserUsernameByGet(data: V2UserUsernameRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByGet.requestConfig),
    ...args
  );
}
v2UserUsernameByGet.requestConfig = {
  path: '/v2/user/{username}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username1\\"],
  queryStringKeyNameList: []
}
/**
 * @description Updated user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
declare interface V2UserUsernameRequestByPut {
  // name that need to be updated
  username: string;
  id?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Updated user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
declare type V2UserUsernameResponseByPut = any;
/**
   * @description Updated user、This can only be done by the logged in user.
   * @url [ PUT ] /v2/user/{username}
   */
declare const v2UserUsernameByPut: {
  (data: V2UserUsernameRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserUsernameResponseByPut>;
  readonly requestConfig: {
    path: '/v2/user/{username}',
    method: 'put',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"username\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Updated user、This can only be done by the logged in user.
   * @url [ PUT ] /v2/user/{username}
   */
export function v2UserUsernameByPut(data: V2UserUsernameRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByPut>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByPut.requestConfig),
    ...args
  );
}
v2UserUsernameByPut.requestConfig = {
  path: '/v2/user/{username}',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username\\"],
  queryStringKeyNameList: []
}
/**
 * @description Delete user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
declare interface V2UserUsernameRequestByDelete {
  // The name that needs to be deleted
  username1: string;
}
/**
 * @description Delete user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
declare type V2UserUsernameResponseByDelete = any;
/**
   * @description Delete user、This can only be done by the logged in user.
   * @url [ DELETE ] /v2/user/{username}
   */
declare const v2UserUsernameByDelete: {
  (data: V2UserUsernameRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserUsernameResponseByDelete>;
  readonly requestConfig: {
    path: '/v2/user/{username}',
    method: 'delete',
    formDataKeyNameList: [],
    pathParamKeyNameList: [\\"username1\\"],
    queryStringKeyNameList: []
  }
};/**
   * @description Delete user、This can only be done by the logged in user.
   * @url [ DELETE ] /v2/user/{username}
   */
export function v2UserUsernameByDelete(data: V2UserUsernameRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserUsernameResponseByDelete>(
    processRequestFunctionConfig(data, extraData, v2UserUsernameByDelete.requestConfig),
    ...args
  );
}
v2UserUsernameByDelete.requestConfig = {
  path: '/v2/user/{username}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username1\\"],
  queryStringKeyNameList: []
}
/**
 * @description Logs user into the system【请求数据类型定义】
 * @url [ GET ] /v2/user/login
 */
declare interface V2UserLoginRequestByGet {
  // The user name for login
  username: string;
  // The password for login in clear text
  password: string;
}
/**
 * @description Logs user into the system【响应数据类型定义】
 * @url [ GET ] /v2/user/login
 */
declare type V2UserLoginResponseByGet = string;
/**
   * @description Logs user into the system
   * @url [ GET ] /v2/user/login
   */
declare const v2UserLoginByGet: {
  (data: V2UserLoginRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserLoginResponseByGet>;
  readonly requestConfig: {
    path: '/v2/user/login',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: [\\"username\\",\\"password\\"]
  }
};/**
   * @description Logs user into the system
   * @url [ GET ] /v2/user/login
   */
export function v2UserLoginByGet(data: V2UserLoginRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserLoginResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserLoginByGet.requestConfig),
    ...args
  );
}
v2UserLoginByGet.requestConfig = {
  path: '/v2/user/login',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"username\\",\\"password\\"]
}
/**
 * @description Logs out current logged in user session【请求数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
declare type V2UserLogoutRequestByGet = Record<string, any>;
/**
 * @description Logs out current logged in user session【响应数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
declare type V2UserLogoutResponseByGet = any;
/**
   * @description Logs out current logged in user session
   * @url [ GET ] /v2/user/logout
   */
declare const v2UserLogoutByGet: {
  (data?: V2UserLogoutRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserLogoutResponseByGet>;
  readonly requestConfig: {
    path: '/v2/user/logout',
    method: 'get',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: []
  }
};/**
   * @description Logs out current logged in user session
   * @url [ GET ] /v2/user/logout
   */
export function v2UserLogoutByGet(data: V2UserLogoutRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserLogoutResponseByGet>(
    processRequestFunctionConfig(data, extraData, v2UserLogoutByGet.requestConfig),
    ...args
  );
}
v2UserLogoutByGet.requestConfig = {
  path: '/v2/user/logout',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Create user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ POST ] /v2/user
 */
declare interface V2UserRequestByPost {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Create user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ POST ] /v2/user
 */
declare type V2UserResponseByPost = any;
/**
   * @description Create user、This can only be done by the logged in user.
   * @url [ POST ] /v2/user
   */
declare const v2UserByPost: {
  (data: V2UserRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType): Promise<V2UserResponseByPost>;
  readonly requestConfig: {
    path: '/v2/user',
    method: 'post',
    formDataKeyNameList: [],
    pathParamKeyNameList: [],
    queryStringKeyNameList: []
  }
};/**
   * @description Create user、This can only be done by the logged in user.
   * @url [ POST ] /v2/user
   */
export function v2UserByPost(data: V2UserRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<V2UserResponseByPost>(
    processRequestFunctionConfig(data, extraData, v2UserByPost.requestConfig),
    ...args
  );
}
v2UserByPost.requestConfig = {
  path: '/v2/user',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}"
`;

exports[`生成全部API函数 OpenAPI-3.0.1生成全部API函数: OpenAPI-3.0.1生成全部API函数 1`] = `
"/**
 * @description 普通body请求-put【请求数据类型定义】
 * @url [ PUT ] /body/bodyPut
 */
export interface BodyBodyPutRequestByPut {
  // 随机名称
  random?: string;
  // 文件名称
  name?: string;
  // 文件大小
  size?: string;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求-put【响应数据类型定义】
 * @url [ PUT ] /body/bodyPut
 */
export interface BodyBodyPutResponseByPut {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 普通body请求-put
   * @url [ PUT ] /body/bodyPut
   */
export function bodyBodyPutByPut(data: BodyBodyPutRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<BodyBodyPutResponseByPut>(
    processRequestFunctionConfig(data, extraData, bodyBodyPutByPut.requestConfig),
    ...args
  );
}
bodyBodyPutByPut.requestConfig = {
  path: '/body/bodyPut',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description body请求【请求数据类型定义】
 * @url [ POST ] /user/{deviceId}/body
 */
export interface UserDeviceIdBodyRequestByPost {
  // 设备id
  deviceId: string;
}
/**
 * @description body请求【响应数据类型定义】
 * @url [ POST ] /user/{deviceId}/body
 */
export interface UserDeviceIdBodyResponseByPost {
  // 用户信息
  // 已领数量
  receiveNumber: number;
  // 注解id-title
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
   * @description body请求
   * @url [ POST ] /user/{deviceId}/body
   */
export function userDeviceIdBodyByPost(data: UserDeviceIdBodyRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserDeviceIdBodyResponseByPost>(
    processRequestFunctionConfig(data, extraData, userDeviceIdBodyByPost.requestConfig),
    ...args
  );
}
userDeviceIdBodyByPost.requestConfig = {
  path: '/user/{deviceId}/body',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"deviceId\\"],
  queryStringKeyNameList: []
}
/**
 * @description body请求1【请求数据类型定义】
 * @url [ POST ] /user/{deviceId}/body1
 */
export interface UserDeviceIdBody1RequestByPost {
  // 设备id
  deviceId: string;
  // 已领数量
  receiveNumber?: number;
  // 注解id-title
  id?: string;
  // 名称
  name?: string;
  // Part信息
  partSchema?: {
    // part部分id
    id?: string;
    // part部分名称
    name?: string;
  };
}
/**
 * @description body请求1【响应数据类型定义】
 * @url [ POST ] /user/{deviceId}/body1
 */
export interface UserDeviceIdBody1ResponseByPost {
  // 用户信息
  // 已领数量
  receiveNumber: number;
  // 注解id-title
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
   * @description body请求1
   * @url [ POST ] /user/{deviceId}/body1
   */
export function userDeviceIdBody1ByPost(data: UserDeviceIdBody1RequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserDeviceIdBody1ResponseByPost>(
    processRequestFunctionConfig(data, extraData, userDeviceIdBody1ByPost.requestConfig),
    ...args
  );
}
userDeviceIdBody1ByPost.requestConfig = {
  path: '/user/{deviceId}/body1',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"deviceId\\"],
  queryStringKeyNameList: []
}
/**
 * @description json参数查询1【请求数据类型定义】
 * @url [ POST ] /user/getRequest1
 */
export interface UserGetRequest1RequestByPost {
  cade: string;
  // 已领数量
  receiveNumber?: number;
  // 注解id-title
  id?: string;
  // 名称
  name?: string;
  // Part信息
  partSchema?: {
    // part部分id
    id?: string;
    // part部分名称
    name?: string;
  };
}
/**
 * @description json参数查询1【响应数据类型定义】
 * @url [ POST ] /user/getRequest1
 */
export interface UserGetRequest1ResponseByPost {
  // 用户信息
  // 已领数量
  receiveNumber: number;
  // 注解id-title
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
   * @description json参数查询1
   * @url [ POST ] /user/getRequest1
   */
export function userGetRequest1ByPost(data: UserGetRequest1RequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserGetRequest1ResponseByPost>(
    processRequestFunctionConfig(data, extraData, userGetRequest1ByPost.requestConfig),
    ...args
  );
}
userGetRequest1ByPost.requestConfig = {
  path: '/user/getRequest1',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"cade\\"]
}
/**
 * @description 创建用户-createOne、根据姓名创建用户1【请求数据类型定义】
 * @url [ POST ] /user/createOne
 */
export interface UserCreateOneRequestByPost {
  // 主键id
  id?: string;
  // 名称
  name?: string;
}
/**
 * @description 创建用户-createOne、根据姓名创建用户1【响应数据类型定义】
 * @url [ POST ] /user/createOne
 */
export interface UserCreateOneResponseByPost {
  // 主键id
  id: string;
  // 名称
  name: string;
}
/**
   * @description 创建用户-createOne、根据姓名创建用户1
   * @url [ POST ] /user/createOne
   */
export function userCreateOneByPost(data: UserCreateOneRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserCreateOneResponseByPost>(
    processRequestFunctionConfig(data, extraData, userCreateOneByPost.requestConfig),
    ...args
  );
}
userCreateOneByPost.requestConfig = {
  path: '/user/createOne',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description 创建用户-Schema、根据姓名创建用户1【请求数据类型定义】
 * @url [ POST ] /user/createOneSchema
 */
export interface UserCreateOneSchemaRequestByPost {
  // 已领数量
  receiveNumber?: number;
  // 注解id-title
  id?: string;
  // 名称
  name?: string;
  // Part信息
  partSchema?: {
    // part部分id
    id?: string;
    // part部分名称
    name?: string;
  };
}
/**
 * @description 创建用户-Schema、根据姓名创建用户1【响应数据类型定义】
 * @url [ POST ] /user/createOneSchema
 */
export interface UserCreateOneSchemaResponseByPost {
  // 用户信息
  // 已领数量
  receiveNumber: number;
  // 注解id-title
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
   * @description 创建用户-Schema、根据姓名创建用户1
   * @url [ POST ] /user/createOneSchema
   */
export function userCreateOneSchemaByPost(data: UserCreateOneSchemaRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserCreateOneSchemaResponseByPost>(
    processRequestFunctionConfig(data, extraData, userCreateOneSchemaByPost.requestConfig),
    ...args
  );
}
userCreateOneSchemaByPost.requestConfig = {
  path: '/user/createOneSchema',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description 创建用户1、根据姓名创建用户1【请求数据类型定义】
 * @url [ POST ] /user/createOne1
 */
export interface UserCreateOne1RequestByPost {
  id?: string;
  name?: string;
}
/**
 * @description 创建用户1、根据姓名创建用户1【响应数据类型定义】
 * @url [ POST ] /user/createOne1
 */
export interface UserCreateOne1ResponseByPost {
  // 主键id
  id: string;
  // 名称
  name: string;
}
/**
   * @description 创建用户1、根据姓名创建用户1
   * @url [ POST ] /user/createOne1
   */
export function userCreateOne1ByPost(data: UserCreateOne1RequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserCreateOne1ResponseByPost>(
    processRequestFunctionConfig(data, extraData, userCreateOne1ByPost.requestConfig),
    ...args
  );
}
userCreateOne1ByPost.requestConfig = {
  path: '/user/createOne1',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"id\\",\\"name\\"]
}
/**
 * @description 单纯文件上传、单纯文件上传，无任何参数【请求数据类型定义】
 * @url [ POST ] /file/upload
 */
export interface FileUploadRequestByPost {
  file: File;
}
/**
 * @description 单纯文件上传、单纯文件上传，无任何参数【响应数据类型定义】
 * @url [ POST ] /file/upload
 */
export interface FileUploadResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 单纯文件上传、单纯文件上传，无任何参数
   * @url [ POST ] /file/upload
   */
export function fileUploadByPost(data: FileUploadRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<FileUploadResponseByPost>(
    processRequestFunctionConfig(data, extraData, fileUploadByPost.requestConfig),
    ...args
  );
}
fileUploadByPost.requestConfig = {
  path: '/file/upload',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description 文件上传-带参数【请求数据类型定义】
 * @url [ POST ] /file/uploadParam
 */
export interface FileUploadParamRequestByPost {
  // 文件名称
  name: string;
  // 文件
  file: File;
}
/**
 * @description 文件上传-带参数【响应数据类型定义】
 * @url [ POST ] /file/uploadParam
 */
export interface FileUploadParamResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 文件上传-带参数
   * @url [ POST ] /file/uploadParam
   */
export function fileUploadParamByPost(data: FileUploadParamRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<FileUploadParamResponseByPost>(
    processRequestFunctionConfig(data, extraData, fileUploadParamByPost.requestConfig),
    ...args
  );
}
fileUploadParamByPost.requestConfig = {
  path: '/file/uploadParam',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"name\\"]
}
/**
 * @description 文件上传-带参数Header【请求数据类型定义】
 * @url [ POST ] /file/uploadParamHeader
 */
export interface FileUploadParamHeaderRequestByPost {
  // 文件名称
  name: string;
  // 文件
  file: File;
}
/**
 * @description 文件上传-带参数Header【响应数据类型定义】
 * @url [ POST ] /file/uploadParamHeader
 */
export interface FileUploadParamHeaderResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 文件上传-带参数Header
   * @url [ POST ] /file/uploadParamHeader
   */
export function fileUploadParamHeaderByPost(data: FileUploadParamHeaderRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<FileUploadParamHeaderResponseByPost>(
    processRequestFunctionConfig(data, extraData, fileUploadParamHeaderByPost.requestConfig),
    ...args
  );
}
fileUploadParamHeaderByPost.requestConfig = {
  path: '/file/uploadParamHeader',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"name\\"]
}
/**
 * @description 文件上传-带参数Path【请求数据类型定义】
 * @url [ POST ] /file/uploadParam/{id}
 */
export interface FileUploadParamIdRequestByPost {
  // 文件id
  id: string;
  // 文件名称
  name: string;
  // 文件
  file: File;
}
/**
 * @description 文件上传-带参数Path【响应数据类型定义】
 * @url [ POST ] /file/uploadParam/{id}
 */
export interface FileUploadParamIdResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 文件上传-带参数Path
   * @url [ POST ] /file/uploadParam/{id}
   */
export function fileUploadParamIdByPost(data: FileUploadParamIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<FileUploadParamIdResponseByPost>(
    processRequestFunctionConfig(data, extraData, fileUploadParamIdByPost.requestConfig),
    ...args
  );
}
fileUploadParamIdByPost.requestConfig = {
  path: '/file/uploadParam/{id}',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"id\\"],
  queryStringKeyNameList: [\\"name\\"]
}
/**
 * @description 多文件上传【请求数据类型定义】
 * @url [ POST ] /file/uploadBatch
 */
export interface FileUploadBatchRequestByPost {
  files: Array<File>;
}
/**
 * @description 多文件上传【响应数据类型定义】
 * @url [ POST ] /file/uploadBatch
 */
export type FileUploadBatchResponseByPost = Array<// 文件对象
{
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}>;
/**
   * @description 多文件上传
   * @url [ POST ] /file/uploadBatch
   */
export function fileUploadBatchByPost(data: FileUploadBatchRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<FileUploadBatchResponseByPost>(
    processRequestFunctionConfig(data, extraData, fileUploadBatchByPost.requestConfig),
    ...args
  );
}
fileUploadBatchByPost.requestConfig = {
  path: '/file/uploadBatch',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description 普通body请求【请求数据类型定义】
 * @url [ POST ] /body/body
 */
export interface BodyBodyRequestByPost {
  // 随机名称
  random?: string;
  // 文件名称
  name?: string;
  // 文件大小
  size?: string;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求【响应数据类型定义】
 * @url [ POST ] /body/body
 */
export interface BodyBodyResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 普通body请求
   * @url [ POST ] /body/body
   */
export function bodyBodyByPost(data: BodyBodyRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<BodyBodyResponseByPost>(
    processRequestFunctionConfig(data, extraData, bodyBodyByPost.requestConfig),
    ...args
  );
}
bodyBodyByPost.requestConfig = {
  path: '/body/body',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description 普通body请求+Param【请求数据类型定义】
 * @url [ POST ] /body/bodyParam
 */
export interface BodyBodyParamRequestByPost {
  name: string;
  // 随机名称
  random?: string;
  // 文件大小
  size?: string;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求+Param【响应数据类型定义】
 * @url [ POST ] /body/bodyParam
 */
export interface BodyBodyParamResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 普通body请求+Param
   * @url [ POST ] /body/bodyParam
   */
export function bodyBodyParamByPost(data: BodyBodyParamRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<BodyBodyParamResponseByPost>(
    processRequestFunctionConfig(data, extraData, bodyBodyParamByPost.requestConfig),
    ...args
  );
}
bodyBodyParamByPost.requestConfig = {
  path: '/body/bodyParam',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"name\\"]
}
/**
 * @description 普通body请求+Param+Header【请求数据类型定义】
 * @url [ POST ] /body/bodyParamHeader
 */
export interface BodyBodyParamHeaderRequestByPost {
  // 文件名称
  name: string;
  // 随机名称
  random?: string;
  // 文件大小
  size?: string;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求+Param+Header【响应数据类型定义】
 * @url [ POST ] /body/bodyParamHeader
 */
export interface BodyBodyParamHeaderResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 普通body请求+Param+Header
   * @url [ POST ] /body/bodyParamHeader
   */
export function bodyBodyParamHeaderByPost(data: BodyBodyParamHeaderRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<BodyBodyParamHeaderResponseByPost>(
    processRequestFunctionConfig(data, extraData, bodyBodyParamHeaderByPost.requestConfig),
    ...args
  );
}
bodyBodyParamHeaderByPost.requestConfig = {
  path: '/body/bodyParamHeader',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"name\\"]
}
/**
 * @description 普通body请求+Param+Header+Path【请求数据类型定义】
 * @url [ POST ] /body/bodyParamHeaderPath/{id}
 */
export interface BodyBodyParamHeaderPathIdRequestByPost {
  // 文件id
  id: string;
  // 文件名称
  name: string;
  // 随机名称
  random?: string;
  // 文件大小
  size?: string;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求+Param+Header+Path【响应数据类型定义】
 * @url [ POST ] /body/bodyParamHeaderPath/{id}
 */
export interface BodyBodyParamHeaderPathIdResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: string;
  // 是否上传成功
  success: boolean;
}
/**
   * @description 普通body请求+Param+Header+Path
   * @url [ POST ] /body/bodyParamHeaderPath/{id}
   */
export function bodyBodyParamHeaderPathIdByPost(data: BodyBodyParamHeaderPathIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<BodyBodyParamHeaderPathIdResponseByPost>(
    processRequestFunctionConfig(data, extraData, bodyBodyParamHeaderPathIdByPost.requestConfig),
    ...args
  );
}
bodyBodyParamHeaderPathIdByPost.requestConfig = {
  path: '/body/bodyParamHeaderPath/{id}',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"id\\"],
  queryStringKeyNameList: [\\"name\\"]
}
/**
 * @description json参数查询【请求数据类型定义】
 * @url [ GET ] /user/getRequest
 */
export interface UserGetRequestRequestByGet {
  userSchema: {
    // 已领数量
    receiveNumber?: number;
    // 注解id-title
    id?: string;
    // 名称
    name?: string;
    // Part信息
    partSchema?: {
      // part部分id
      id?: string;
      // part部分名称
      name?: string;
    };
  };
  cade: string;
}
/**
 * @description json参数查询【响应数据类型定义】
 * @url [ GET ] /user/getRequest
 */
export interface UserGetRequestResponseByGet {
  // 用户信息
  // 已领数量
  receiveNumber: number;
  // 注解id-title
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
   * @description json参数查询
   * @url [ GET ] /user/getRequest
   */
export function userGetRequestByGet(data: UserGetRequestRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserGetRequestResponseByGet>(
    processRequestFunctionConfig(data, extraData, userGetRequestByGet.requestConfig),
    ...args
  );
}
userGetRequestByGet.requestConfig = {
  path: '/user/getRequest',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"userSchema\\",\\"cade\\"]
}
/**
 * @description 创建用户、根据姓名创建用户【请求数据类型定义】
 * @url [ GET ] /user/create
 */
export interface UserCreateRequestByGet {
  name: string;
}
/**
 * @description 创建用户、根据姓名创建用户【响应数据类型定义】
 * @url [ GET ] /user/create
 */
export type UserCreateResponseByGet = string;
/**
   * @description 创建用户、根据姓名创建用户
   * @url [ GET ] /user/create
   */
export function userCreateByGet(data: UserCreateRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<UserCreateResponseByGet>(
    processRequestFunctionConfig(data, extraData, userCreateByGet.requestConfig),
    ...args
  );
}
userCreateByGet.requestConfig = {
  path: '/user/create',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"name\\"]
}"
`;

exports[`生成全部API函数 OpenAPI-3.0生成全部API函数: OpenAPI-3.0生成全部API函数 1`] = `
"/**
 * @description Update an existing pet、Update an existing pet by Id【请求数据类型定义】
 * @url [ PUT ] /api/v3/pet
 */
export interface ApiV3PetRequestByPut {
  id?: string;
  name: string;
  category?: {
    id?: string;
    name?: string;
  };
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet、Update an existing pet by Id【响应数据类型定义】
 * @url [ PUT ] /api/v3/pet
 */
export interface ApiV3PetResponseByPut {
  id: string;
  name: string;
  category: {
    id: string;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
   * @description Update an existing pet、Update an existing pet by Id
   * @url [ PUT ] /api/v3/pet
   */
export function apiV3PetByPut(data: ApiV3PetRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetResponseByPut>(
    processRequestFunctionConfig(data, extraData, apiV3PetByPut.requestConfig),
    ...args
  );
}
apiV3PetByPut.requestConfig = {
  path: '/api/v3/pet',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"id\\",\\"name\\",\\"category\\",\\"photoUrls\\",\\"tags\\",\\"status\\"]
}
/**
 * @description Add a new pet to the store、Add a new pet to the store【请求数据类型定义】
 * @url [ POST ] /api/v3/pet
 */
export interface ApiV3PetRequestByPost {
  id?: string;
  name: string;
  category?: {
    id?: string;
    name?: string;
  };
  photoUrls: Array<string>;
  tags?: Array<{
    id?: string;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store、Add a new pet to the store【响应数据类型定义】
 * @url [ POST ] /api/v3/pet
 */
export interface ApiV3PetResponseByPost {
  id: string;
  name: string;
  category: {
    id: string;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
   * @description Add a new pet to the store、Add a new pet to the store
   * @url [ POST ] /api/v3/pet
   */
export function apiV3PetByPost(data: ApiV3PetRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3PetByPost.requestConfig),
    ...args
  );
}
apiV3PetByPost.requestConfig = {
  path: '/api/v3/pet',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"id\\",\\"name\\",\\"category\\",\\"photoUrls\\",\\"tags\\",\\"status\\"]
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【请求数据类型定义】
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export interface ApiV3PetFindByStatusRequestByGet {
  // Status values that need to be considered for filter
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【响应数据类型定义】
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export type ApiV3PetFindByStatusResponseByGet = Array<{
  id: string;
  name: string;
  category: {
    id: string;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
   * @url [ GET ] /api/v3/pet/findByStatus
   */
export function apiV3PetFindByStatusByGet(data: ApiV3PetFindByStatusRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetFindByStatusResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3PetFindByStatusByGet.requestConfig),
    ...args
  );
}
apiV3PetFindByStatusByGet.requestConfig = {
  path: '/api/v3/pet/findByStatus',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"status\\"]
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【请求数据类型定义】
 * @url [ GET ] /api/v3/pet/findByTags
 */
export interface ApiV3PetFindByTagsRequestByGet {
  // Tags to filter by
  tags?: Array<string>;
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【响应数据类型定义】
 * @url [ GET ] /api/v3/pet/findByTags
 */
export type ApiV3PetFindByTagsResponseByGet = Array<{
  id: string;
  name: string;
  category: {
    id: string;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
   * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @url [ GET ] /api/v3/pet/findByTags
   */
export function apiV3PetFindByTagsByGet(data: ApiV3PetFindByTagsRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetFindByTagsResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3PetFindByTagsByGet.requestConfig),
    ...args
  );
}
apiV3PetFindByTagsByGet.requestConfig = {
  path: '/api/v3/pet/findByTags',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"tags\\"]
}
/**
 * @description Find pet by ID、Returns a single pet【请求数据类型定义】
 * @url [ GET ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdRequestByGet {
  // ID of pet to return
  petId: string;
}
/**
 * @description Find pet by ID、Returns a single pet【响应数据类型定义】
 * @url [ GET ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdResponseByGet {
  id: string;
  name: string;
  category: {
    id: string;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: string;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
   * @description Find pet by ID、Returns a single pet
   * @url [ GET ] /api/v3/pet/{petId}
   */
export function apiV3PetPetIdByGet(data: ApiV3PetPetIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetPetIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3PetPetIdByGet.requestConfig),
    ...args
  );
}
apiV3PetPetIdByGet.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Updates a pet in the store with form data【请求数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdRequestByPost {
  // ID of pet that needs to be updated
  petId: string;
  // Name of pet that needs to be updated
  name?: string;
  // Status of pet that needs to be updated
  status?: string;
}
/**
 * @description Updates a pet in the store with form data【响应数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}
 */
export type ApiV3PetPetIdResponseByPost = any;
/**
   * @description Updates a pet in the store with form data
   * @url [ POST ] /api/v3/pet/{petId}
   */
export function apiV3PetPetIdByPost(data: ApiV3PetPetIdRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetPetIdResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3PetPetIdByPost.requestConfig),
    ...args
  );
}
apiV3PetPetIdByPost.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: [\\"name\\",\\"status\\"]
}
/**
 * @description Deletes a pet【请求数据类型定义】
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export interface ApiV3PetPetIdRequestByDelete {
  // Pet id to delete
  petId: string;
}
/**
 * @description Deletes a pet【响应数据类型定义】
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export type ApiV3PetPetIdResponseByDelete = any;
/**
   * @description Deletes a pet
   * @url [ DELETE ] /api/v3/pet/{petId}
   */
export function apiV3PetPetIdByDelete(data: ApiV3PetPetIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetPetIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, apiV3PetPetIdByDelete.requestConfig),
    ...args
  );
}
apiV3PetPetIdByDelete.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: []
}
/**
 * @description uploads an image【请求数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export interface ApiV3PetPetIdUploadImageRequestByPost {
  // ID of pet to update
  petId: string;
  // Additional Metadata
  additionalMetadata?: string;
}
/**
 * @description uploads an image【响应数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export interface ApiV3PetPetIdUploadImageResponseByPost {
  code: number;
  type: string;
  message: string;
}
/**
   * @description uploads an image
   * @url [ POST ] /api/v3/pet/{petId}/uploadImage
   */
export function apiV3PetPetIdUploadImageByPost(data: ApiV3PetPetIdUploadImageRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3PetPetIdUploadImageResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3PetPetIdUploadImageByPost.requestConfig),
    ...args
  );
}
apiV3PetPetIdUploadImageByPost.requestConfig = {
  path: '/api/v3/pet/{petId}/uploadImage',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"petId\\"],
  queryStringKeyNameList: [\\"additionalMetadata\\"]
}
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【请求数据类型定义】
 * @url [ GET ] /api/v3/store/inventory
 */
export type ApiV3StoreInventoryRequestByGet = Record<string, any>;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【响应数据类型定义】
 * @url [ GET ] /api/v3/store/inventory
 */
export type ApiV3StoreInventoryResponseByGet = any;
/**
   * @description Returns pet inventories by status、Returns a map of status codes to quantities
   * @url [ GET ] /api/v3/store/inventory
   */
export function apiV3StoreInventoryByGet(data: ApiV3StoreInventoryRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3StoreInventoryResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3StoreInventoryByGet.requestConfig),
    ...args
  );
}
apiV3StoreInventoryByGet.requestConfig = {
  path: '/api/v3/store/inventory',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Place an order for a pet、Place a new order in the store【请求数据类型定义】
 * @url [ POST ] /api/v3/store/order
 */
export interface ApiV3StoreOrderRequestByPost {
  id?: string;
  petId?: string;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
/**
 * @description Place an order for a pet、Place a new order in the store【响应数据类型定义】
 * @url [ POST ] /api/v3/store/order
 */
export interface ApiV3StoreOrderResponseByPost {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
   * @description Place an order for a pet、Place a new order in the store
   * @url [ POST ] /api/v3/store/order
   */
export function apiV3StoreOrderByPost(data: ApiV3StoreOrderRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3StoreOrderResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3StoreOrderByPost.requestConfig),
    ...args
  );
}
apiV3StoreOrderByPost.requestConfig = {
  path: '/api/v3/store/order',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"id\\",\\"petId\\",\\"quantity\\",\\"shipDate\\",\\"status\\",\\"complete\\"]
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.【请求数据类型定义】
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export interface ApiV3StoreOrderOrderIdRequestByGet {
  // ID of order that needs to be fetched
  orderId: string;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.【响应数据类型定义】
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export interface ApiV3StoreOrderOrderIdResponseByGet {
  id: string;
  petId: string;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
   * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   * @url [ GET ] /api/v3/store/order/{orderId}
   */
export function apiV3StoreOrderOrderIdByGet(data: ApiV3StoreOrderOrderIdRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3StoreOrderOrderIdResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3StoreOrderOrderIdByGet.requestConfig),
    ...args
  );
}
apiV3StoreOrderOrderIdByGet.requestConfig = {
  path: '/api/v3/store/order/{orderId}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors【请求数据类型定义】
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export interface ApiV3StoreOrderOrderIdRequestByDelete {
  // ID of the order that needs to be deleted
  orderId: string;
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors【响应数据类型定义】
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export type ApiV3StoreOrderOrderIdResponseByDelete = any;
/**
   * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
   * @url [ DELETE ] /api/v3/store/order/{orderId}
   */
export function apiV3StoreOrderOrderIdByDelete(data: ApiV3StoreOrderOrderIdRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3StoreOrderOrderIdResponseByDelete>(
    processRequestFunctionConfig(data, extraData, apiV3StoreOrderOrderIdByDelete.requestConfig),
    ...args
  );
}
apiV3StoreOrderOrderIdByDelete.requestConfig = {
  path: '/api/v3/store/order/{orderId}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"orderId\\"],
  queryStringKeyNameList: []
}
/**
 * @description Create user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ POST ] /api/v3/user
 */
export interface ApiV3UserRequestByPost {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Create user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ POST ] /api/v3/user
 */
export type ApiV3UserResponseByPost = any;
/**
   * @description Create user、This can only be done by the logged in user.
   * @url [ POST ] /api/v3/user
   */
export function apiV3UserByPost(data: ApiV3UserRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3UserByPost.requestConfig),
    ...args
  );
}
apiV3UserByPost.requestConfig = {
  path: '/api/v3/user',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"id\\",\\"username\\",\\"firstName\\",\\"lastName\\",\\"email\\",\\"password\\",\\"phone\\",\\"userStatus\\"]
}
/**
 * @description Creates list of users with given input array、Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /api/v3/user/createWithList
 */
export type ApiV3UserCreateWithListRequestByPost = Array<{
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}>;
/**
 * @description Creates list of users with given input array、Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /api/v3/user/createWithList
 */
export interface ApiV3UserCreateWithListResponseByPost {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
   * @description Creates list of users with given input array、Creates list of users with given input array
   * @url [ POST ] /api/v3/user/createWithList
   */
export function apiV3UserCreateWithListByPost(data: ApiV3UserCreateWithListRequestByPost, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserCreateWithListResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3UserCreateWithListByPost.requestConfig),
    ...args
  );
}
apiV3UserCreateWithListByPost.requestConfig = {
  path: '/api/v3/user/createWithList',
  method: 'POST',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Logs user into the system【请求数据类型定义】
 * @url [ GET ] /api/v3/user/login
 */
export interface ApiV3UserLoginRequestByGet {
  // The user name for login
  username?: string;
  // The password for login in clear text
  password?: string;
}
/**
 * @description Logs user into the system【响应数据类型定义】
 * @url [ GET ] /api/v3/user/login
 */
export type ApiV3UserLoginResponseByGet = string;
/**
   * @description Logs user into the system
   * @url [ GET ] /api/v3/user/login
   */
export function apiV3UserLoginByGet(data: ApiV3UserLoginRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserLoginResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3UserLoginByGet.requestConfig),
    ...args
  );
}
apiV3UserLoginByGet.requestConfig = {
  path: '/api/v3/user/login',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"username\\",\\"password\\"]
}
/**
 * @description Logs out current logged in user session【请求数据类型定义】
 * @url [ GET ] /api/v3/user/logout
 */
export type ApiV3UserLogoutRequestByGet = Record<string, any>;
/**
 * @description Logs out current logged in user session【响应数据类型定义】
 * @url [ GET ] /api/v3/user/logout
 */
export type ApiV3UserLogoutResponseByGet = any;
/**
   * @description Logs out current logged in user session
   * @url [ GET ] /api/v3/user/logout
   */
export function apiV3UserLogoutByGet(data: ApiV3UserLogoutRequestByGet = {}, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserLogoutResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3UserLogoutByGet.requestConfig),
    ...args
  );
}
apiV3UserLogoutByGet.requestConfig = {
  path: '/api/v3/user/logout',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
}
/**
 * @description Get user by user name【请求数据类型定义】
 * @url [ GET ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameRequestByGet {
  // The name that needs to be fetched. Use user1 for testing.
  username1: string;
}
/**
 * @description Get user by user name【响应数据类型定义】
 * @url [ GET ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameResponseByGet {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
   * @description Get user by user name
   * @url [ GET ] /api/v3/user/{username}
   */
export function apiV3UserUsernameByGet(data: ApiV3UserUsernameRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserUsernameResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3UserUsernameByGet.requestConfig),
    ...args
  );
}
apiV3UserUsernameByGet.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username1\\"],
  queryStringKeyNameList: []
}
/**
 * @description Update user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ PUT ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameRequestByPut {
  // name that need to be deleted
  username1: string;
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Update user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ PUT ] /api/v3/user/{username}
 */
export type ApiV3UserUsernameResponseByPut = any;
/**
   * @description Update user、This can only be done by the logged in user.
   * @url [ PUT ] /api/v3/user/{username}
   */
export function apiV3UserUsernameByPut(data: ApiV3UserUsernameRequestByPut, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserUsernameResponseByPut>(
    processRequestFunctionConfig(data, extraData, apiV3UserUsernameByPut.requestConfig),
    ...args
  );
}
apiV3UserUsernameByPut.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'PUT',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username1\\"],
  queryStringKeyNameList: [\\"id\\",\\"username\\",\\"firstName\\",\\"lastName\\",\\"email\\",\\"password\\",\\"phone\\",\\"userStatus\\"]
}
/**
 * @description Delete user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ DELETE ] /api/v3/user/{username}
 */
export interface ApiV3UserUsernameRequestByDelete {
  // The name that needs to be deleted
  username: string;
}
/**
 * @description Delete user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ DELETE ] /api/v3/user/{username}
 */
export type ApiV3UserUsernameResponseByDelete = any;
/**
   * @description Delete user、This can only be done by the logged in user.
   * @url [ DELETE ] /api/v3/user/{username}
   */
export function apiV3UserUsernameByDelete(data: ApiV3UserUsernameRequestByDelete, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3UserUsernameResponseByDelete>(
    processRequestFunctionConfig(data, extraData, apiV3UserUsernameByDelete.requestConfig),
    ...args
  );
}
apiV3UserUsernameByDelete.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'DELETE',
  formDataKeyNameList: [],
  pathParamKeyNameList: [\\"username\\"],
  queryStringKeyNameList: []
}
/**
 * @description 查看排班列表、/api/ftb【请求数据类型定义】
 * @url [ GET ] /api/v3/api/ftb/arranging/work
 */
export interface ApiV3ApiFtbArrangingWorkRequestByGet {
  // 考勤组id
  groupId: string;
  // 成员名称
  realName?: string;
  // 月份
  month: string;
  // 用户id集合
  userIds?: Array<string>;
}
/**
 * @description 查看排班列表、/api/ftb【响应数据类型定义】
 * @url [ GET ] /api/v3/api/ftb/arranging/work
 */
export type ApiV3ApiFtbArrangingWorkResponseByGet = Array<{
  // 排班实体
  schedulesVO: {
    // 用户id
    userId: string;
    // 名称
    realName: string;
    // 是否移除(1移除)
    delMark: string;
    // 是否自己的考勤组
    selfGroup: string;
    val: {
      '2023-11-10': Array<{
        // 类型
        type: number;
        // 时段id
        periodId: string;
        // 开始时间点
        start: string;
        // 结束时间点
        end: string;
        // 下班时间是否为次日(1今日 2次日)
        isEndTomorrow: string;
        // 是否自己的考勤组
        selfGroup: string;
        // 排序
        sort: number;
      }>;
    };
  };
}>;
/**
   * @description 查看排班列表、/api/ftb
   * @url [ GET ] /api/v3/api/ftb/arranging/work
   */
export function apiV3ApiFtbArrangingWorkByGet(data: ApiV3ApiFtbArrangingWorkRequestByGet, extraData?: unknown, ...args: CurrentRequestFunctionRestArgsType) {
  return request<ApiV3ApiFtbArrangingWorkResponseByGet>(
    processRequestFunctionConfig(data, extraData, apiV3ApiFtbArrangingWorkByGet.requestConfig),
    ...args
  );
}
apiV3ApiFtbArrangingWorkByGet.requestConfig = {
  path: '/api/v3/api/ftb/arranging/work',
  method: 'GET',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [\\"groupId\\",\\"realName\\",\\"month\\",\\"userIds\\"]
}"
`;
