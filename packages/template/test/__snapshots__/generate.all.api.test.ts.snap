// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`生成全部API函数 OpenAPI-2.0生成全部API函数: OpenAPI-2.0生成全部API函数 1`] = `
"/**
 * @description uploads an image【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
export interface IV2PetPetIdUploadImageRequestByPost {
  // ID of pet to update
  petId: string;
  // Additional data to pass to server
  additionalMetadata?: string;
  // file to upload
  file?: string;
}
/**
 * @description uploads an image【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
export interface IV2PetPetIdUploadImageResponseByPost {
  code: number;
  type: string;
  message: string;
}
/**
 * @description uploads an image
 * @url [ POST ] /v2/pet/{petId}/uploadImage
 */
export function v2PetPetIdUploadImageByPost(
  data: IV2PetPetIdUploadImageRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IV2PetPetIdUploadImageResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2PetPetIdUploadImageByPost.requestConfig
    ),
    ...args
  );
}
v2PetPetIdUploadImageByPost.requestConfig = {
  path: '/v2/pet/{petId}/uploadImage',
  method: 'post',
  formDataKeyNameList: ['additionalMetadata', 'file'],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: []
};

/**
 * @description Add a new pet to the store【请求数据类型定义】
 * @url [ POST ] /v2/pet
 */
export interface IV2PetRequestByPost {
  id?: number;
  category: {
    id?: number;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id?: number;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store【响应数据类型定义】
 * @url [ POST ] /v2/pet
 */
export type V2PetResponseTypeByPost = any;
/**
 * @description Add a new pet to the store
 * @url [ POST ] /v2/pet
 */
export function v2PetByPost(
  data: IV2PetRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2PetResponseTypeByPost>(
    processRequestFunctionConfig(data, extraData, v2PetByPost.requestConfig),
    ...args
  );
}
v2PetByPost.requestConfig = {
  path: '/v2/pet',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Update an existing pet【请求数据类型定义】
 * @url [ PUT ] /v2/pet
 */
export interface IV2PetRequestByPut {
  id?: number;
  category: {
    id?: number;
    name?: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id?: number;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet【响应数据类型定义】
 * @url [ PUT ] /v2/pet
 */
export type V2PetResponseTypeByPut = any;
/**
 * @description Update an existing pet
 * @url [ PUT ] /v2/pet
 */
export function v2PetByPut(
  data: IV2PetRequestByPut,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2PetResponseTypeByPut>(
    processRequestFunctionConfig(data, extraData, v2PetByPut.requestConfig),
    ...args
  );
}
v2PetByPut.requestConfig = {
  path: '/v2/pet',
  method: 'put',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
export interface IV2PetFindByStatusRequestByGet {
  // Status values that need to be considered for filter
  status: string;
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByStatus
 */
export type V2PetFindByStatusResponseTypeByGet = Array<{
  id: number;
  category: {
    id: number;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
 * @url [ GET ] /v2/pet/findByStatus
 */
export function v2PetFindByStatusByGet(
  data: IV2PetFindByStatusRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2PetFindByStatusResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2PetFindByStatusByGet.requestConfig
    ),
    ...args
  );
}
v2PetFindByStatusByGet.requestConfig = {
  path: '/v2/pet/findByStatus',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['status']
};

/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【请求数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
export interface IV2PetFindByTagsRequestByGet {
  // Tags to filter by
  tags: string;
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【响应数据类型定义】
 * @url [ GET ] /v2/pet/findByTags
 */
export type V2PetFindByTagsResponseTypeByGet = Array<{
  id: number;
  category: {
    id: number;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @url [ GET ] /v2/pet/findByTags
 */
export function v2PetFindByTagsByGet(
  data: IV2PetFindByTagsRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2PetFindByTagsResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2PetFindByTagsByGet.requestConfig
    ),
    ...args
  );
}
v2PetFindByTagsByGet.requestConfig = {
  path: '/v2/pet/findByTags',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['tags']
};

/**
 * @description Find pet by ID、Returns a single pet【请求数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
export interface IV2PetPetIdRequestByGet {
  // ID of pet to return
  petId: string;
}
/**
 * @description Find pet by ID、Returns a single pet【响应数据类型定义】
 * @url [ GET ] /v2/pet/{petId}
 */
export interface IV2PetPetIdResponseByGet {
  id: number;
  category: {
    id: number;
    name: string;
  };
  name: string;
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
 * @description Find pet by ID、Returns a single pet
 * @url [ GET ] /v2/pet/{petId}
 */
export function v2PetPetIdByGet(
  data: IV2PetPetIdRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IV2PetPetIdResponseByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2PetPetIdByGet.requestConfig
    ),
    ...args
  );
}
v2PetPetIdByGet.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: []
};

/**
 * @description Updates a pet in the store with form data【请求数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
export interface IV2PetPetIdRequestByPost {
  // ID of pet that needs to be updated
  petId: string;
  // Updated name of the pet
  name?: string;
  // Updated status of the pet
  status?: string;
}
/**
 * @description Updates a pet in the store with form data【响应数据类型定义】
 * @url [ POST ] /v2/pet/{petId}
 */
export type V2PetPetIdResponseTypeByPost = any;
/**
 * @description Updates a pet in the store with form data
 * @url [ POST ] /v2/pet/{petId}
 */
export function v2PetPetIdByPost(
  data: IV2PetPetIdRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2PetPetIdResponseTypeByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2PetPetIdByPost.requestConfig
    ),
    ...args
  );
}
v2PetPetIdByPost.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'post',
  formDataKeyNameList: ['name', 'status'],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: []
};

/**
 * @description Deletes a pet【请求数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
export interface IV2PetPetIdRequestByDelete {
  // Pet id to delete
  petId: string;
}
/**
 * @description Deletes a pet【响应数据类型定义】
 * @url [ DELETE ] /v2/pet/{petId}
 */
export type V2PetPetIdResponseTypeByDelete = any;
/**
 * @description Deletes a pet
 * @url [ DELETE ] /v2/pet/{petId}
 */
export function v2PetPetIdByDelete(
  data: IV2PetPetIdRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2PetPetIdResponseTypeByDelete>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2PetPetIdByDelete.requestConfig
    ),
    ...args
  );
}
v2PetPetIdByDelete.requestConfig = {
  path: '/v2/pet/{petId}',
  method: 'delete',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: []
};

/**
 * @description Place an order for a pet【请求数据类型定义】
 * @url [ POST ] /v2/store/order
 */
export interface IV2StoreOrderRequestByPost {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
/**
 * @description Place an order for a pet【响应数据类型定义】
 * @url [ POST ] /v2/store/order
 */
export interface IV2StoreOrderResponseByPost {
  id: number;
  petId: number;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
 * @description Place an order for a pet
 * @url [ POST ] /v2/store/order
 */
export function v2StoreOrderByPost(
  data: IV2StoreOrderRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IV2StoreOrderResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2StoreOrderByPost.requestConfig
    ),
    ...args
  );
}
v2StoreOrderByPost.requestConfig = {
  path: '/v2/store/order',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【请求数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
export interface IV2StoreOrderOrderIdRequestByGet {
  // ID of pet that needs to be fetched
  orderId: string;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions【响应数据类型定义】
 * @url [ GET ] /v2/store/order/{orderId}
 */
export interface IV2StoreOrderOrderIdResponseByGet {
  id: number;
  petId: number;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 * @url [ GET ] /v2/store/order/{orderId}
 */
export function v2StoreOrderOrderIdByGet(
  data: IV2StoreOrderOrderIdRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IV2StoreOrderOrderIdResponseByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2StoreOrderOrderIdByGet.requestConfig
    ),
    ...args
  );
}
v2StoreOrderOrderIdByGet.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['orderId'],
  queryStringKeyNameList: []
};

/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【请求数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
export interface IV2StoreOrderOrderIdRequestByDelete {
  // ID of the order that needs to be deleted
  orderId: string;
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors【响应数据类型定义】
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
export type V2StoreOrderOrderIdResponseTypeByDelete = any;
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 * @url [ DELETE ] /v2/store/order/{orderId}
 */
export function v2StoreOrderOrderIdByDelete(
  data: IV2StoreOrderOrderIdRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2StoreOrderOrderIdResponseTypeByDelete>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2StoreOrderOrderIdByDelete.requestConfig
    ),
    ...args
  );
}
v2StoreOrderOrderIdByDelete.requestConfig = {
  path: '/v2/store/order/{orderId}',
  method: 'delete',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['orderId'],
  queryStringKeyNameList: []
};

/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【请求数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
export type V2StoreInventoryRequestTypeByGet = any;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【响应数据类型定义】
 * @url [ GET ] /v2/store/inventory
 */
export type V2StoreInventoryResponseTypeByGet = any;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities
 * @url [ GET ] /v2/store/inventory
 */
export function v2StoreInventoryByGet(
  data: V2StoreInventoryRequestTypeByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2StoreInventoryResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2StoreInventoryByGet.requestConfig
    ),
    ...args
  );
}
v2StoreInventoryByGet.requestConfig = {
  path: '/v2/store/inventory',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
export type V2UserCreateWithArrayRequestTypeByPost = any;
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithArray
 */
export type V2UserCreateWithArrayResponseTypeByPost = any;
/**
 * @description Creates list of users with given input array
 * @url [ POST ] /v2/user/createWithArray
 */
export function v2UserCreateWithArrayByPost(
  data: V2UserCreateWithArrayRequestTypeByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2UserCreateWithArrayResponseTypeByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2UserCreateWithArrayByPost.requestConfig
    ),
    ...args
  );
}
v2UserCreateWithArrayByPost.requestConfig = {
  path: '/v2/user/createWithArray',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
export type V2UserCreateWithListRequestTypeByPost = any;
/**
 * @description Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /v2/user/createWithList
 */
export type V2UserCreateWithListResponseTypeByPost = any;
/**
 * @description Creates list of users with given input array
 * @url [ POST ] /v2/user/createWithList
 */
export function v2UserCreateWithListByPost(
  data: V2UserCreateWithListRequestTypeByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2UserCreateWithListResponseTypeByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2UserCreateWithListByPost.requestConfig
    ),
    ...args
  );
}
v2UserCreateWithListByPost.requestConfig = {
  path: '/v2/user/createWithList',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Get user by user name【请求数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
export interface IV2UserUsernameRequestByGet {
  // The name that needs to be fetched. Use user1 for testing.
  username: string;
}
/**
 * @description Get user by user name【响应数据类型定义】
 * @url [ GET ] /v2/user/{username}
 */
export interface IV2UserUsernameResponseByGet {
  id: number;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
 * @description Get user by user name
 * @url [ GET ] /v2/user/{username}
 */
export function v2UserUsernameByGet(
  data: IV2UserUsernameRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IV2UserUsernameResponseByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2UserUsernameByGet.requestConfig
    ),
    ...args
  );
}
v2UserUsernameByGet.requestConfig = {
  path: '/v2/user/{username}',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username'],
  queryStringKeyNameList: []
};

/**
 * @description Updated user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
export interface IV2UserUsernameRequestByPut {
  // name that need to be updated
  username: string;
  id?: number;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Updated user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ PUT ] /v2/user/{username}
 */
export type V2UserUsernameResponseTypeByPut = any;
/**
 * @description Updated user、This can only be done by the logged in user.
 * @url [ PUT ] /v2/user/{username}
 */
export function v2UserUsernameByPut(
  data: IV2UserUsernameRequestByPut,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2UserUsernameResponseTypeByPut>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2UserUsernameByPut.requestConfig
    ),
    ...args
  );
}
v2UserUsernameByPut.requestConfig = {
  path: '/v2/user/{username}',
  method: 'put',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username'],
  queryStringKeyNameList: []
};

/**
 * @description Delete user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
export interface IV2UserUsernameRequestByDelete {
  // The name that needs to be deleted
  username: string;
}
/**
 * @description Delete user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ DELETE ] /v2/user/{username}
 */
export type V2UserUsernameResponseTypeByDelete = any;
/**
 * @description Delete user、This can only be done by the logged in user.
 * @url [ DELETE ] /v2/user/{username}
 */
export function v2UserUsernameByDelete(
  data: IV2UserUsernameRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2UserUsernameResponseTypeByDelete>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2UserUsernameByDelete.requestConfig
    ),
    ...args
  );
}
v2UserUsernameByDelete.requestConfig = {
  path: '/v2/user/{username}',
  method: 'delete',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username'],
  queryStringKeyNameList: []
};

/**
 * @description Logs user into the system【请求数据类型定义】
 * @url [ GET ] /v2/user/login
 */
export interface IV2UserLoginRequestByGet {
  // The user name for login
  username: string;
  // The password for login in clear text
  password: string;
}
/**
 * @description Logs user into the system【响应数据类型定义】
 * @url [ GET ] /v2/user/login
 */
export type V2UserLoginResponseTypeByGet = string;
/**
 * @description Logs user into the system
 * @url [ GET ] /v2/user/login
 */
export function v2UserLoginByGet(
  data: IV2UserLoginRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2UserLoginResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2UserLoginByGet.requestConfig
    ),
    ...args
  );
}
v2UserLoginByGet.requestConfig = {
  path: '/v2/user/login',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['username', 'password']
};

/**
 * @description Logs out current logged in user session【请求数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
export type V2UserLogoutRequestTypeByGet = any;
/**
 * @description Logs out current logged in user session【响应数据类型定义】
 * @url [ GET ] /v2/user/logout
 */
export type V2UserLogoutResponseTypeByGet = any;
/**
 * @description Logs out current logged in user session
 * @url [ GET ] /v2/user/logout
 */
export function v2UserLogoutByGet(
  data: V2UserLogoutRequestTypeByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2UserLogoutResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      v2UserLogoutByGet.requestConfig
    ),
    ...args
  );
}
v2UserLogoutByGet.requestConfig = {
  path: '/v2/user/logout',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Create user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ POST ] /v2/user
 */
export interface IV2UserRequestByPost {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Create user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ POST ] /v2/user
 */
export type V2UserResponseTypeByPost = any;
/**
 * @description Create user、This can only be done by the logged in user.
 * @url [ POST ] /v2/user
 */
export function v2UserByPost(
  data: IV2UserRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<V2UserResponseTypeByPost>(
    processRequestFunctionConfig(data, extraData, v2UserByPost.requestConfig),
    ...args
  );
}
v2UserByPost.requestConfig = {
  path: '/v2/user',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};
"
`;

exports[`生成全部API函数 OpenAPI-3.0.1生成全部API函数: OpenAPI-3.0.1生成全部API函数 1`] = `
"/**
 * @description 普通body请求-put【请求数据类型定义】
 * @url [ PUT ] /body/bodyPut
 */
export interface IBodyBodyPutRequestByPut {
  // 随机名称
  random?: string;
  // 文件名称
  name?: string;
  // 文件大小
  size?: number;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求-put【响应数据类型定义】
 * @url [ PUT ] /body/bodyPut
 */
export interface IBodyBodyPutResponseByPut {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 普通body请求-put
 * @url [ PUT ] /body/bodyPut
 */
export function bodyBodyPutByPut(
  data: IBodyBodyPutRequestByPut,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IBodyBodyPutResponseByPut>(
    processRequestFunctionConfig(
      data,
      extraData,
      bodyBodyPutByPut.requestConfig
    ),
    ...args
  );
}
bodyBodyPutByPut.requestConfig = {
  path: '/body/bodyPut',
  method: 'put',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description body请求【请求数据类型定义】
 * @url [ POST ] /user/{deviceId}/body
 */
export interface IUserDeviceIdBodyRequestByPost {
  // 设备id
  deviceId: string;
}
/**
 * @description body请求【响应数据类型定义】
 * @url [ POST ] /user/{deviceId}/body
 */
export interface IUserDeviceIdBodyResponseByPost {
  // 用户信息
  // 主键id（注解id-title）
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
 * @description body请求
 * @url [ POST ] /user/{deviceId}/body
 */
export function userDeviceIdBodyByPost(
  data: IUserDeviceIdBodyRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IUserDeviceIdBodyResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      userDeviceIdBodyByPost.requestConfig
    ),
    ...args
  );
}
userDeviceIdBodyByPost.requestConfig = {
  path: '/user/{deviceId}/body',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['deviceId'],
  queryStringKeyNameList: []
};

/**
 * @description body请求1【请求数据类型定义】
 * @url [ POST ] /user/{deviceId}/body1
 */
export interface IUserDeviceIdBody1RequestByPost {
  // 设备id
  deviceId: string;
  // 主键id（注解id-title）
  id?: string;
  // 名称
  name?: string;
  // Part信息
  partSchema: {
    // part部分id
    id?: string;
    // part部分名称
    name?: string;
  };
}
/**
 * @description body请求1【响应数据类型定义】
 * @url [ POST ] /user/{deviceId}/body1
 */
export interface IUserDeviceIdBody1ResponseByPost {
  // 用户信息
  // 主键id（注解id-title）
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
 * @description body请求1
 * @url [ POST ] /user/{deviceId}/body1
 */
export function userDeviceIdBody1ByPost(
  data: IUserDeviceIdBody1RequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IUserDeviceIdBody1ResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      userDeviceIdBody1ByPost.requestConfig
    ),
    ...args
  );
}
userDeviceIdBody1ByPost.requestConfig = {
  path: '/user/{deviceId}/body1',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['deviceId'],
  queryStringKeyNameList: []
};

/**
 * @description json参数查询1【请求数据类型定义】
 * @url [ POST ] /user/getRequest1
 */
export interface IUserGetRequest1RequestByPost {
  cade: string;
  // 主键id（注解id-title）
  id?: string;
  // 名称
  name?: string;
  // Part信息
  partSchema: {
    // part部分id
    id?: string;
    // part部分名称
    name?: string;
  };
}
/**
 * @description json参数查询1【响应数据类型定义】
 * @url [ POST ] /user/getRequest1
 */
export interface IUserGetRequest1ResponseByPost {
  // 用户信息
  // 主键id（注解id-title）
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
 * @description json参数查询1
 * @url [ POST ] /user/getRequest1
 */
export function userGetRequest1ByPost(
  data: IUserGetRequest1RequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IUserGetRequest1ResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      userGetRequest1ByPost.requestConfig
    ),
    ...args
  );
}
userGetRequest1ByPost.requestConfig = {
  path: '/user/getRequest1',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['cade']
};

/**
 * @description 创建用户-createOne、根据姓名创建用户1【请求数据类型定义】
 * @url [ POST ] /user/createOne
 */
export interface IUserCreateOneRequestByPost {
  // 主键id
  id?: string;
  // 名称
  name?: string;
}
/**
 * @description 创建用户-createOne、根据姓名创建用户1【响应数据类型定义】
 * @url [ POST ] /user/createOne
 */
export interface IUserCreateOneResponseByPost {
  // 主键id
  id: string;
  // 名称
  name: string;
}
/**
 * @description 创建用户-createOne、根据姓名创建用户1
 * @url [ POST ] /user/createOne
 */
export function userCreateOneByPost(
  data: IUserCreateOneRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IUserCreateOneResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      userCreateOneByPost.requestConfig
    ),
    ...args
  );
}
userCreateOneByPost.requestConfig = {
  path: '/user/createOne',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description 创建用户-Schema、根据姓名创建用户1【请求数据类型定义】
 * @url [ POST ] /user/createOneSchema
 */
export interface IUserCreateOneSchemaRequestByPost {
  // 主键id（注解id-title）
  id?: string;
  // 名称
  name?: string;
  // Part信息
  partSchema: {
    // part部分id
    id?: string;
    // part部分名称
    name?: string;
  };
}
/**
 * @description 创建用户-Schema、根据姓名创建用户1【响应数据类型定义】
 * @url [ POST ] /user/createOneSchema
 */
export interface IUserCreateOneSchemaResponseByPost {
  // 用户信息
  // 主键id（注解id-title）
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
 * @description 创建用户-Schema、根据姓名创建用户1
 * @url [ POST ] /user/createOneSchema
 */
export function userCreateOneSchemaByPost(
  data: IUserCreateOneSchemaRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IUserCreateOneSchemaResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      userCreateOneSchemaByPost.requestConfig
    ),
    ...args
  );
}
userCreateOneSchemaByPost.requestConfig = {
  path: '/user/createOneSchema',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description 创建用户1、根据姓名创建用户1【请求数据类型定义】
 * @url [ POST ] /user/createOne1
 */
export interface IUserCreateOne1RequestByPost {
  id?: string;
  name?: string;
}
/**
 * @description 创建用户1、根据姓名创建用户1【响应数据类型定义】
 * @url [ POST ] /user/createOne1
 */
export interface IUserCreateOne1ResponseByPost {
  // 主键id
  id: string;
  // 名称
  name: string;
}
/**
 * @description 创建用户1、根据姓名创建用户1
 * @url [ POST ] /user/createOne1
 */
export function userCreateOne1ByPost(
  data: IUserCreateOne1RequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IUserCreateOne1ResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      userCreateOne1ByPost.requestConfig
    ),
    ...args
  );
}
userCreateOne1ByPost.requestConfig = {
  path: '/user/createOne1',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['id', 'name']
};

/**
 * @description 单纯文件上传、单纯文件上传，无任何参数【请求数据类型定义】
 * @url [ POST ] /file/upload
 */
export interface IFileUploadRequestByPost {
  file: string;
}
/**
 * @description 单纯文件上传、单纯文件上传，无任何参数【响应数据类型定义】
 * @url [ POST ] /file/upload
 */
export interface IFileUploadResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 单纯文件上传、单纯文件上传，无任何参数
 * @url [ POST ] /file/upload
 */
export function fileUploadByPost(
  data: IFileUploadRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IFileUploadResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      fileUploadByPost.requestConfig
    ),
    ...args
  );
}
fileUploadByPost.requestConfig = {
  path: '/file/upload',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description 文件上传-带参数【请求数据类型定义】
 * @url [ POST ] /file/uploadParam
 */
export interface IFileUploadParamRequestByPost {
  // 文件名称
  name: string;
  // 文件
  file: string;
}
/**
 * @description 文件上传-带参数【响应数据类型定义】
 * @url [ POST ] /file/uploadParam
 */
export interface IFileUploadParamResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 文件上传-带参数
 * @url [ POST ] /file/uploadParam
 */
export function fileUploadParamByPost(
  data: IFileUploadParamRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IFileUploadParamResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      fileUploadParamByPost.requestConfig
    ),
    ...args
  );
}
fileUploadParamByPost.requestConfig = {
  path: '/file/uploadParam',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['name']
};

/**
 * @description 文件上传-带参数Header【请求数据类型定义】
 * @url [ POST ] /file/uploadParamHeader
 */
export interface IFileUploadParamHeaderRequestByPost {
  // 文件名称
  name: string;
  // 文件
  file: string;
}
/**
 * @description 文件上传-带参数Header【响应数据类型定义】
 * @url [ POST ] /file/uploadParamHeader
 */
export interface IFileUploadParamHeaderResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 文件上传-带参数Header
 * @url [ POST ] /file/uploadParamHeader
 */
export function fileUploadParamHeaderByPost(
  data: IFileUploadParamHeaderRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IFileUploadParamHeaderResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      fileUploadParamHeaderByPost.requestConfig
    ),
    ...args
  );
}
fileUploadParamHeaderByPost.requestConfig = {
  path: '/file/uploadParamHeader',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['name']
};

/**
 * @description 文件上传-带参数Path【请求数据类型定义】
 * @url [ POST ] /file/uploadParam/{id}
 */
export interface IFileUploadParamIdRequestByPost {
  // 文件id
  id: string;
  // 文件名称
  name: string;
  // 文件
  file: string;
}
/**
 * @description 文件上传-带参数Path【响应数据类型定义】
 * @url [ POST ] /file/uploadParam/{id}
 */
export interface IFileUploadParamIdResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 文件上传-带参数Path
 * @url [ POST ] /file/uploadParam/{id}
 */
export function fileUploadParamIdByPost(
  data: IFileUploadParamIdRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IFileUploadParamIdResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      fileUploadParamIdByPost.requestConfig
    ),
    ...args
  );
}
fileUploadParamIdByPost.requestConfig = {
  path: '/file/uploadParam/{id}',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['id'],
  queryStringKeyNameList: ['name']
};

/**
 * @description 多文件上传【请求数据类型定义】
 * @url [ POST ] /file/uploadBatch
 */
export interface IFileUploadBatchRequestByPost {
  files: Array<string>;
}
/**
 * @description 多文件上传【响应数据类型定义】
 * @url [ POST ] /file/uploadBatch
 */
export type FileUploadBatchResponseTypeByPost = Array<// 文件对象
{
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}>;
/**
 * @description 多文件上传
 * @url [ POST ] /file/uploadBatch
 */
export function fileUploadBatchByPost(
  data: IFileUploadBatchRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<FileUploadBatchResponseTypeByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      fileUploadBatchByPost.requestConfig
    ),
    ...args
  );
}
fileUploadBatchByPost.requestConfig = {
  path: '/file/uploadBatch',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description 普通body请求【请求数据类型定义】
 * @url [ POST ] /body/body
 */
export interface IBodyBodyRequestByPost {
  // 随机名称
  random?: string;
  // 文件名称
  name?: string;
  // 文件大小
  size?: number;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求【响应数据类型定义】
 * @url [ POST ] /body/body
 */
export interface IBodyBodyResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 普通body请求
 * @url [ POST ] /body/body
 */
export function bodyBodyByPost(
  data: IBodyBodyRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IBodyBodyResponseByPost>(
    processRequestFunctionConfig(data, extraData, bodyBodyByPost.requestConfig),
    ...args
  );
}
bodyBodyByPost.requestConfig = {
  path: '/body/body',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description 普通body请求+Param【请求数据类型定义】
 * @url [ POST ] /body/bodyParam
 */
export interface IBodyBodyParamRequestByPost {
  name: string;
  // 随机名称
  random?: string;
  // 文件大小
  size?: number;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求+Param【响应数据类型定义】
 * @url [ POST ] /body/bodyParam
 */
export interface IBodyBodyParamResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 普通body请求+Param
 * @url [ POST ] /body/bodyParam
 */
export function bodyBodyParamByPost(
  data: IBodyBodyParamRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IBodyBodyParamResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      bodyBodyParamByPost.requestConfig
    ),
    ...args
  );
}
bodyBodyParamByPost.requestConfig = {
  path: '/body/bodyParam',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['name']
};

/**
 * @description 普通body请求+Param+Header【请求数据类型定义】
 * @url [ POST ] /body/bodyParamHeader
 */
export interface IBodyBodyParamHeaderRequestByPost {
  // 文件名称
  name: string;
  // 随机名称
  random?: string;
  // 文件大小
  size?: number;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求+Param+Header【响应数据类型定义】
 * @url [ POST ] /body/bodyParamHeader
 */
export interface IBodyBodyParamHeaderResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 普通body请求+Param+Header
 * @url [ POST ] /body/bodyParamHeader
 */
export function bodyBodyParamHeaderByPost(
  data: IBodyBodyParamHeaderRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IBodyBodyParamHeaderResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      bodyBodyParamHeaderByPost.requestConfig
    ),
    ...args
  );
}
bodyBodyParamHeaderByPost.requestConfig = {
  path: '/body/bodyParamHeader',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['name']
};

/**
 * @description 普通body请求+Param+Header+Path【请求数据类型定义】
 * @url [ POST ] /body/bodyParamHeaderPath/{id}
 */
export interface IBodyBodyParamHeaderPathIdRequestByPost {
  // 文件id
  id: string;
  // 文件名称
  name: string;
  // 随机名称
  random?: string;
  // 文件大小
  size?: number;
  // 是否上传成功
  success?: boolean;
}
/**
 * @description 普通body请求+Param+Header+Path【响应数据类型定义】
 * @url [ POST ] /body/bodyParamHeaderPath/{id}
 */
export interface IBodyBodyParamHeaderPathIdResponseByPost {
  // 文件对象
  // 随机名称
  random: string;
  // 文件名称
  name: string;
  // 文件大小
  size: number;
  // 是否上传成功
  success: boolean;
}
/**
 * @description 普通body请求+Param+Header+Path
 * @url [ POST ] /body/bodyParamHeaderPath/{id}
 */
export function bodyBodyParamHeaderPathIdByPost(
  data: IBodyBodyParamHeaderPathIdRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IBodyBodyParamHeaderPathIdResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      bodyBodyParamHeaderPathIdByPost.requestConfig
    ),
    ...args
  );
}
bodyBodyParamHeaderPathIdByPost.requestConfig = {
  path: '/body/bodyParamHeaderPath/{id}',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['id'],
  queryStringKeyNameList: ['name']
};

/**
 * @description json参数查询【请求数据类型定义】
 * @url [ GET ] /user/getRequest
 */
export interface IUserGetRequestRequestByGet {
  userSchema: {
    // 主键id（注解id-title）
    id?: string;
    // 名称
    name?: string;
    // Part信息
    partSchema: {
      // part部分id
      id?: string;
      // part部分名称
      name?: string;
    };
  };
  cade: string;
}
/**
 * @description json参数查询【响应数据类型定义】
 * @url [ GET ] /user/getRequest
 */
export interface IUserGetRequestResponseByGet {
  // 用户信息
  // 主键id（注解id-title）
  id: string;
  // 名称
  name: string;
  // Part信息
  partSchema: {
    // part部分id
    id: string;
    // part部分名称
    name: string;
  };
}
/**
 * @description json参数查询
 * @url [ GET ] /user/getRequest
 */
export function userGetRequestByGet(
  data: IUserGetRequestRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IUserGetRequestResponseByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      userGetRequestByGet.requestConfig
    ),
    ...args
  );
}
userGetRequestByGet.requestConfig = {
  path: '/user/getRequest',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['userSchema', 'cade']
};

/**
 * @description 创建用户、根据姓名创建用户【请求数据类型定义】
 * @url [ GET ] /user/create
 */
export interface IUserCreateRequestByGet {
  name: string;
}
/**
 * @description 创建用户、根据姓名创建用户【响应数据类型定义】
 * @url [ GET ] /user/create
 */
export type UserCreateResponseTypeByGet = string;
/**
 * @description 创建用户、根据姓名创建用户
 * @url [ GET ] /user/create
 */
export function userCreateByGet(
  data: IUserCreateRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<UserCreateResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      userCreateByGet.requestConfig
    ),
    ...args
  );
}
userCreateByGet.requestConfig = {
  path: '/user/create',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['name']
};
"
`;

exports[`生成全部API函数 OpenAPI-3.0生成全部API函数: OpenAPI-3.0生成全部API函数 1`] = `
"/**
 * @description Update an existing pet、Update an existing pet by Id【请求数据类型定义】
 * @url [ PUT ] /api/v3/pet
 */
export interface IApiV3PetRequestByPut {
  id?: number;
  name: string;
  category: {
    id?: number;
    name?: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id?: number;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet、Update an existing pet by Id【响应数据类型定义】
 * @url [ PUT ] /api/v3/pet
 */
export interface IApiV3PetResponseByPut {
  id: number;
  name: string;
  category: {
    id: number;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
 * @description Update an existing pet、Update an existing pet by Id
 * @url [ PUT ] /api/v3/pet
 */
export function apiV3PetByPut(
  data: IApiV3PetRequestByPut,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3PetResponseByPut>(
    processRequestFunctionConfig(data, extraData, apiV3PetByPut.requestConfig),
    ...args
  );
}
apiV3PetByPut.requestConfig = {
  path: '/api/v3/pet',
  method: 'put',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [
    'id',
    'name',
    'category',
    'photoUrls',
    'tags',
    'status'
  ]
};

/**
 * @description Add a new pet to the store、Add a new pet to the store【请求数据类型定义】
 * @url [ POST ] /api/v3/pet
 */
export interface IApiV3PetRequestByPost {
  id?: number;
  name: string;
  category: {
    id?: number;
    name?: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id?: number;
    name?: string;
  }>;
  // pet status in the store
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store、Add a new pet to the store【响应数据类型定义】
 * @url [ POST ] /api/v3/pet
 */
export interface IApiV3PetResponseByPost {
  id: number;
  name: string;
  category: {
    id: number;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
 * @description Add a new pet to the store、Add a new pet to the store
 * @url [ POST ] /api/v3/pet
 */
export function apiV3PetByPost(
  data: IApiV3PetRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3PetResponseByPost>(
    processRequestFunctionConfig(data, extraData, apiV3PetByPost.requestConfig),
    ...args
  );
}
apiV3PetByPost.requestConfig = {
  path: '/api/v3/pet',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [
    'id',
    'name',
    'category',
    'photoUrls',
    'tags',
    'status'
  ]
};

/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【请求数据类型定义】
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export interface IApiV3PetFindByStatusRequestByGet {
  // Status values that need to be considered for filter
  status?: 'available' | 'pending' | 'sold';
}
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings【响应数据类型定义】
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export type ApiV3PetFindByStatusResponseTypeByGet = Array<{
  id: number;
  name: string;
  category: {
    id: number;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
 * @description Finds Pets by status、Multiple status values can be provided with comma separated strings
 * @url [ GET ] /api/v3/pet/findByStatus
 */
export function apiV3PetFindByStatusByGet(
  data: IApiV3PetFindByStatusRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetFindByStatusResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3PetFindByStatusByGet.requestConfig
    ),
    ...args
  );
}
apiV3PetFindByStatusByGet.requestConfig = {
  path: '/api/v3/pet/findByStatus',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['status']
};

/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【请求数据类型定义】
 * @url [ GET ] /api/v3/pet/findByTags
 */
export interface IApiV3PetFindByTagsRequestByGet {
  // Tags to filter by
  tags: Array<string>;
}
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.【响应数据类型定义】
 * @url [ GET ] /api/v3/pet/findByTags
 */
export type ApiV3PetFindByTagsResponseTypeByGet = Array<{
  id: number;
  name: string;
  category: {
    id: number;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}>;
/**
 * @description Finds Pets by tags、Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @url [ GET ] /api/v3/pet/findByTags
 */
export function apiV3PetFindByTagsByGet(
  data: IApiV3PetFindByTagsRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetFindByTagsResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3PetFindByTagsByGet.requestConfig
    ),
    ...args
  );
}
apiV3PetFindByTagsByGet.requestConfig = {
  path: '/api/v3/pet/findByTags',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['tags']
};

/**
 * @description Find pet by ID、Returns a single pet【请求数据类型定义】
 * @url [ GET ] /api/v3/pet/{petId}
 */
export interface IApiV3PetPetIdRequestByGet {
  // ID of pet to return
  petId: number;
}
/**
 * @description Find pet by ID、Returns a single pet【响应数据类型定义】
 * @url [ GET ] /api/v3/pet/{petId}
 */
export interface IApiV3PetPetIdResponseByGet {
  id: number;
  name: string;
  category: {
    id: number;
    name: string;
  };
  photoUrls: Array<string>;
  tags: Array<{
    id: number;
    name: string;
  }>;
  // pet status in the store
  status: 'available' | 'pending' | 'sold';
}
/**
 * @description Find pet by ID、Returns a single pet
 * @url [ GET ] /api/v3/pet/{petId}
 */
export function apiV3PetPetIdByGet(
  data: IApiV3PetPetIdRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3PetPetIdResponseByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3PetPetIdByGet.requestConfig
    ),
    ...args
  );
}
apiV3PetPetIdByGet.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: []
};

/**
 * @description Updates a pet in the store with form data【请求数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}
 */
export interface IApiV3PetPetIdRequestByPost {
  // ID of pet that needs to be updated
  petId: number;
  // Name of pet that needs to be updated
  name?: string;
  // Status of pet that needs to be updated
  status?: string;
}
/**
 * @description Updates a pet in the store with form data【响应数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}
 */
export type ApiV3PetPetIdResponseTypeByPost = any;
/**
 * @description Updates a pet in the store with form data
 * @url [ POST ] /api/v3/pet/{petId}
 */
export function apiV3PetPetIdByPost(
  data: IApiV3PetPetIdRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetPetIdResponseTypeByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3PetPetIdByPost.requestConfig
    ),
    ...args
  );
}
apiV3PetPetIdByPost.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: ['name', 'status']
};

/**
 * @description Deletes a pet【请求数据类型定义】
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export interface IApiV3PetPetIdRequestByDelete {
  // Pet id to delete
  petId: number;
}
/**
 * @description Deletes a pet【响应数据类型定义】
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export type ApiV3PetPetIdResponseTypeByDelete = any;
/**
 * @description Deletes a pet
 * @url [ DELETE ] /api/v3/pet/{petId}
 */
export function apiV3PetPetIdByDelete(
  data: IApiV3PetPetIdRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3PetPetIdResponseTypeByDelete>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3PetPetIdByDelete.requestConfig
    ),
    ...args
  );
}
apiV3PetPetIdByDelete.requestConfig = {
  path: '/api/v3/pet/{petId}',
  method: 'delete',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: []
};

/**
 * @description uploads an image【请求数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export interface IApiV3PetPetIdUploadImageRequestByPost {
  // ID of pet to update
  petId: number;
  // Additional Metadata
  additionalMetadata?: string;
}
/**
 * @description uploads an image【响应数据类型定义】
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export interface IApiV3PetPetIdUploadImageResponseByPost {
  code: number;
  type: string;
  message: string;
}
/**
 * @description uploads an image
 * @url [ POST ] /api/v3/pet/{petId}/uploadImage
 */
export function apiV3PetPetIdUploadImageByPost(
  data: IApiV3PetPetIdUploadImageRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3PetPetIdUploadImageResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3PetPetIdUploadImageByPost.requestConfig
    ),
    ...args
  );
}
apiV3PetPetIdUploadImageByPost.requestConfig = {
  path: '/api/v3/pet/{petId}/uploadImage',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['petId'],
  queryStringKeyNameList: ['additionalMetadata']
};

/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【请求数据类型定义】
 * @url [ GET ] /api/v3/store/inventory
 */
export type ApiV3StoreInventoryRequestTypeByGet = any;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities【响应数据类型定义】
 * @url [ GET ] /api/v3/store/inventory
 */
export type ApiV3StoreInventoryResponseTypeByGet = any;
/**
 * @description Returns pet inventories by status、Returns a map of status codes to quantities
 * @url [ GET ] /api/v3/store/inventory
 */
export function apiV3StoreInventoryByGet(
  data: ApiV3StoreInventoryRequestTypeByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3StoreInventoryResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3StoreInventoryByGet.requestConfig
    ),
    ...args
  );
}
apiV3StoreInventoryByGet.requestConfig = {
  path: '/api/v3/store/inventory',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Place an order for a pet、Place a new order in the store【请求数据类型定义】
 * @url [ POST ] /api/v3/store/order
 */
export interface IApiV3StoreOrderRequestByPost {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  // Order Status
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
/**
 * @description Place an order for a pet、Place a new order in the store【响应数据类型定义】
 * @url [ POST ] /api/v3/store/order
 */
export interface IApiV3StoreOrderResponseByPost {
  id: number;
  petId: number;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
 * @description Place an order for a pet、Place a new order in the store
 * @url [ POST ] /api/v3/store/order
 */
export function apiV3StoreOrderByPost(
  data: IApiV3StoreOrderRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3StoreOrderResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3StoreOrderByPost.requestConfig
    ),
    ...args
  );
}
apiV3StoreOrderByPost.requestConfig = {
  path: '/api/v3/store/order',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [
    'id',
    'petId',
    'quantity',
    'shipDate',
    'status',
    'complete'
  ]
};

/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.【请求数据类型定义】
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export interface IApiV3StoreOrderOrderIdRequestByGet {
  // ID of order that needs to be fetched
  orderId: number;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.【响应数据类型定义】
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export interface IApiV3StoreOrderOrderIdResponseByGet {
  id: number;
  petId: number;
  quantity: number;
  shipDate: string;
  // Order Status
  status: 'placed' | 'approved' | 'delivered';
  complete: boolean;
}
/**
 * @description Find purchase order by ID、For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @url [ GET ] /api/v3/store/order/{orderId}
 */
export function apiV3StoreOrderOrderIdByGet(
  data: IApiV3StoreOrderOrderIdRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3StoreOrderOrderIdResponseByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3StoreOrderOrderIdByGet.requestConfig
    ),
    ...args
  );
}
apiV3StoreOrderOrderIdByGet.requestConfig = {
  path: '/api/v3/store/order/{orderId}',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['orderId'],
  queryStringKeyNameList: []
};

/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors【请求数据类型定义】
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export interface IApiV3StoreOrderOrderIdRequestByDelete {
  // ID of the order that needs to be deleted
  orderId: number;
}
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors【响应数据类型定义】
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export type ApiV3StoreOrderOrderIdResponseTypeByDelete = any;
/**
 * @description Delete purchase order by ID、For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @url [ DELETE ] /api/v3/store/order/{orderId}
 */
export function apiV3StoreOrderOrderIdByDelete(
  data: IApiV3StoreOrderOrderIdRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3StoreOrderOrderIdResponseTypeByDelete>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3StoreOrderOrderIdByDelete.requestConfig
    ),
    ...args
  );
}
apiV3StoreOrderOrderIdByDelete.requestConfig = {
  path: '/api/v3/store/order/{orderId}',
  method: 'delete',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['orderId'],
  queryStringKeyNameList: []
};

/**
 * @description Create user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ POST ] /api/v3/user
 */
export interface IApiV3UserRequestByPost {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Create user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ POST ] /api/v3/user
 */
export type ApiV3UserResponseTypeByPost = any;
/**
 * @description Create user、This can only be done by the logged in user.
 * @url [ POST ] /api/v3/user
 */
export function apiV3UserByPost(
  data: IApiV3UserRequestByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserResponseTypeByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3UserByPost.requestConfig
    ),
    ...args
  );
}
apiV3UserByPost.requestConfig = {
  path: '/api/v3/user',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: [
    'id',
    'username',
    'firstName',
    'lastName',
    'email',
    'password',
    'phone',
    'userStatus'
  ]
};

/**
 * @description Creates list of users with given input array、Creates list of users with given input array【请求数据类型定义】
 * @url [ POST ] /api/v3/user/createWithList
 */
export type ApiV3UserCreateWithListRequestTypeByPost = Array<{
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}>;
/**
 * @description Creates list of users with given input array、Creates list of users with given input array【响应数据类型定义】
 * @url [ POST ] /api/v3/user/createWithList
 */
export interface IApiV3UserCreateWithListResponseByPost {
  id: number;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
 * @description Creates list of users with given input array、Creates list of users with given input array
 * @url [ POST ] /api/v3/user/createWithList
 */
export function apiV3UserCreateWithListByPost(
  data: ApiV3UserCreateWithListRequestTypeByPost,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3UserCreateWithListResponseByPost>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3UserCreateWithListByPost.requestConfig
    ),
    ...args
  );
}
apiV3UserCreateWithListByPost.requestConfig = {
  path: '/api/v3/user/createWithList',
  method: 'post',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Logs user into the system【请求数据类型定义】
 * @url [ GET ] /api/v3/user/login
 */
export interface IApiV3UserLoginRequestByGet {
  // The user name for login
  username?: string;
  // The password for login in clear text
  password?: string;
}
/**
 * @description Logs user into the system【响应数据类型定义】
 * @url [ GET ] /api/v3/user/login
 */
export type ApiV3UserLoginResponseTypeByGet = string;
/**
 * @description Logs user into the system
 * @url [ GET ] /api/v3/user/login
 */
export function apiV3UserLoginByGet(
  data: IApiV3UserLoginRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserLoginResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3UserLoginByGet.requestConfig
    ),
    ...args
  );
}
apiV3UserLoginByGet.requestConfig = {
  path: '/api/v3/user/login',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: ['username', 'password']
};

/**
 * @description Logs out current logged in user session【请求数据类型定义】
 * @url [ GET ] /api/v3/user/logout
 */
export type ApiV3UserLogoutRequestTypeByGet = any;
/**
 * @description Logs out current logged in user session【响应数据类型定义】
 * @url [ GET ] /api/v3/user/logout
 */
export type ApiV3UserLogoutResponseTypeByGet = any;
/**
 * @description Logs out current logged in user session
 * @url [ GET ] /api/v3/user/logout
 */
export function apiV3UserLogoutByGet(
  data: ApiV3UserLogoutRequestTypeByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserLogoutResponseTypeByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3UserLogoutByGet.requestConfig
    ),
    ...args
  );
}
apiV3UserLogoutByGet.requestConfig = {
  path: '/api/v3/user/logout',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: [],
  queryStringKeyNameList: []
};

/**
 * @description Get user by user name【请求数据类型定义】
 * @url [ GET ] /api/v3/user/{username}
 */
export interface IApiV3UserUsernameRequestByGet {
  // The name that needs to be fetched. Use user1 for testing.
  username1: string;
}
/**
 * @description Get user by user name【响应数据类型定义】
 * @url [ GET ] /api/v3/user/{username}
 */
export interface IApiV3UserUsernameResponseByGet {
  id: number;
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  // User Status
  userStatus: number;
}
/**
 * @description Get user by user name
 * @url [ GET ] /api/v3/user/{username}
 */
export function apiV3UserUsernameByGet(
  data: IApiV3UserUsernameRequestByGet,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<IApiV3UserUsernameResponseByGet>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3UserUsernameByGet.requestConfig
    ),
    ...args
  );
}
apiV3UserUsernameByGet.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'get',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username1'],
  queryStringKeyNameList: []
};

/**
 * @description Update user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ PUT ] /api/v3/user/{username}
 */
export interface IApiV3UserUsernameRequestByPut {
  // name that need to be deleted
  username1: string;
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  // User Status
  userStatus?: number;
}
/**
 * @description Update user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ PUT ] /api/v3/user/{username}
 */
export type ApiV3UserUsernameResponseTypeByPut = any;
/**
 * @description Update user、This can only be done by the logged in user.
 * @url [ PUT ] /api/v3/user/{username}
 */
export function apiV3UserUsernameByPut(
  data: IApiV3UserUsernameRequestByPut,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserUsernameResponseTypeByPut>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3UserUsernameByPut.requestConfig
    ),
    ...args
  );
}
apiV3UserUsernameByPut.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'put',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username1'],
  queryStringKeyNameList: [
    'id',
    'username',
    'firstName',
    'lastName',
    'email',
    'password',
    'phone',
    'userStatus'
  ]
};

/**
 * @description Delete user、This can only be done by the logged in user.【请求数据类型定义】
 * @url [ DELETE ] /api/v3/user/{username}
 */
export interface IApiV3UserUsernameRequestByDelete {
  // The name that needs to be deleted
  username: string;
}
/**
 * @description Delete user、This can only be done by the logged in user.【响应数据类型定义】
 * @url [ DELETE ] /api/v3/user/{username}
 */
export type ApiV3UserUsernameResponseTypeByDelete = any;
/**
 * @description Delete user、This can only be done by the logged in user.
 * @url [ DELETE ] /api/v3/user/{username}
 */
export function apiV3UserUsernameByDelete(
  data: IApiV3UserUsernameRequestByDelete,
  extraData?: unknown,
  ...args: CurrentRequestFunctionRestArgsType
) {
  return request<ApiV3UserUsernameResponseTypeByDelete>(
    processRequestFunctionConfig(
      data,
      extraData,
      apiV3UserUsernameByDelete.requestConfig
    ),
    ...args
  );
}
apiV3UserUsernameByDelete.requestConfig = {
  path: '/api/v3/user/{username}',
  method: 'delete',
  formDataKeyNameList: [],
  pathParamKeyNameList: ['username'],
  queryStringKeyNameList: []
};
"
`;
